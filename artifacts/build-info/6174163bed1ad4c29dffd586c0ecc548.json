{"id":"6174163bed1ad4c29dffd586c0ecc548","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"},"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../VRFConsumerBase.sol\";\n\ncontract VRFCoordinatorMock {\n  LinkTokenInterface public LINK;\n\n  event RandomnessRequest(address indexed sender, bytes32 indexed keyHash, uint256 indexed seed);\n\n  constructor(address linkAddress) public {\n    LINK = LinkTokenInterface(linkAddress);\n  }\n\n  function onTokenTransfer(\n    address sender,\n    uint256 fee,\n    bytes memory _data\n  ) public onlyLINK {\n    (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\n    emit RandomnessRequest(sender, keyHash, seed);\n  }\n\n  function callBackWithRandomness(\n    bytes32 requestId,\n    uint256 randomness,\n    address consumerContract\n  ) public {\n    VRFConsumerBase v;\n    bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\n    uint256 b = 206000;\n    require(gasleft() >= b, \"not enough gas for consumer\");\n    (bool success, ) = consumerContract.call(resp);\n  }\n\n  modifier onlyLINK() {\n    require(msg.sender == address(LINK), \"Must use LINK token\");\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"},"contracts/test/VRFCoordinatorV2Mock.sol":{"content":"//SPDX-license-identifier:MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol\";\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/test/VRFCoordinatorV2Mock.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/test/VRFCoordinatorV2Mock.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2462","formattedMessage":"Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n  --> @chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol:12:3:\n   |\n12 |   constructor(address linkAddress) public {\n   |   ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":393,"file":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","start":304},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> @chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol:18:5:\n   |\n18 |     uint256 fee,\n   |     ^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":458,"file":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","start":447},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> @chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol:34:6:\n   |\n34 |     (bool success, ) = consumerContract.call(resp);\n   |      ^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":990,"file":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","start":978},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol","exportedSymbols":{"LinkTokenInterface":[265],"VRFConsumerBase":[120],"VRFRequestIDBase":[170]},"id":121,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","file":"./interfaces/LinkTokenInterface.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":121,"sourceUnit":266,"src":"57:45:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol","file":"./VRFRequestIDBase.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":121,"sourceUnit":171,"src":"104:32:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"VRFRequestIDBase","nodeType":"IdentifierPath","referencedDeclaration":170,"src":"5397:16:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"5397:16:0"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"138:5221:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash), and have told you the minimum LINK\n @dev price for VRF service. Make sure your contract has sufficient LINK, and\n @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n @dev want to generate randomness from.\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomness method.\n @dev The randomness argument to fulfillRandomness is the actual random value\n @dev generated from your seed.\n @dev The requestId argument is generated from the keyHash and the seed by\n @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n @dev requests open, you can use the requestId to track which seed is\n @dev associated with which randomness. See VRFRequestIDBase.sol for more\n @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.)\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ. (Which is critical to making unpredictable randomness! See the\n @dev next section.)\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the ultimate input to the VRF is mixed with the block hash of the\n @dev block in which the request is made, user-provided seeds have no impact\n @dev on its economic security properties. They are only included for API\n @dev compatability with previous versions of this contract.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request."},"fullyImplemented":false,"id":120,"linearizedBaseContracts":[120,170],"name":"VRFConsumerBase","nameLocation":"5378:15:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"5418:641:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBase expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomness the VRF output"},"id":14,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomness","nameLocation":"6071:17:0","nodeType":"FunctionDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"mutability":"mutable","name":"requestId","nameLocation":"6097:9:0","nodeType":"VariableDeclaration","scope":14,"src":"6089:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6089:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":11,"mutability":"mutable","name":"randomness","nameLocation":"6116:10:0","nodeType":"VariableDeclaration","scope":14,"src":"6108:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10,"name":"uint256","nodeType":"ElementaryTypeName","src":"6108:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6088:39:0"},"returnParameters":{"id":13,"nodeType":"ParameterList","parameters":[],"src":"6144:0:0"},"scope":120,"src":"6062:83:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":true,"documentation":{"id":15,"nodeType":"StructuredDocumentation","src":"6149:388:0","text":" @dev In order to keep backwards compatibility we have kept the user\n seed field around. We remove the use of it because given that the blockhash\n enters later, it overrides whatever randomness the used seed provides.\n Given that it adds no security, and can easily lead to misunderstandings,\n we have removed it from usage and can now provide a simpler API."},"id":18,"mutability":"constant","name":"USER_SEED_PLACEHOLDER","nameLocation":"6565:21:0","nodeType":"VariableDeclaration","scope":120,"src":"6540:50:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":16,"name":"uint256","nodeType":"ElementaryTypeName","src":"6540:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":17,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6589:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"body":{"id":69,"nodeType":"Block","src":"7828:924:0","statements":[{"expression":{"arguments":[{"id":31,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"7855:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":32,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"7871:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":35,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"7888:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":36,"name":"USER_SEED_PLACEHOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"7898:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":33,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7877:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"7877:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":37,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7877:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":28,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"7834:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":253,"src":"7834:20:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7834:87:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":39,"nodeType":"ExpressionStatement","src":"7834:87:0"},{"assignments":[41],"declarations":[{"constant":false,"id":41,"mutability":"mutable","name":"vRFSeed","nameLocation":"8160:7:0","nodeType":"VariableDeclaration","scope":69,"src":"8152:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":40,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":53,"initialValue":{"arguments":[{"id":43,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8187:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":44,"name":"USER_SEED_PLACEHOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"8197:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":47,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8228:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}],"id":46,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8220:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":45,"name":"address","nodeType":"ElementaryTypeName","src":"8220:7:0","typeDescriptions":{}}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8220:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":49,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8235:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":51,"indexExpression":{"id":50,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8242:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8235:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42,"name":"makeVRFInputSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"8170:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes32,uint256,address,uint256) pure returns (uint256)"}},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8170:82:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8152:100:0"},{"expression":{"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":54,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8663:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":56,"indexExpression":{"id":55,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8670:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8663:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":61,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":57,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8682:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":59,"indexExpression":{"id":58,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8689:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8682:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":60,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8701:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8682:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8663:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":63,"nodeType":"ExpressionStatement","src":"8663:39:0"},{"expression":{"arguments":[{"id":65,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8729:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":66,"name":"vRFSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"8739:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":64,"name":"makeRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"8715:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes32,uint256) pure returns (bytes32)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8715:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":27,"id":68,"nodeType":"Return","src":"8708:39:0"}]},"documentation":{"id":19,"nodeType":"StructuredDocumentation","src":"6595:1134:0","text":" @notice requestRandomness initiates a request for VRF output given _seed\n @dev The fulfillRandomness method receives the output, once it's provided\n @dev by the Oracle, and verified by the vrfCoordinator.\n @dev The _keyHash must already be registered with the VRFCoordinator, and\n @dev the _fee must exceed the fee specified during registration of the\n @dev _keyHash.\n @dev The _seed parameter is vestigial, and is kept only for API\n @dev compatibility with older versions. It can't *hurt* to mix in some of\n @dev your own randomness, here, but it's not necessary because the VRF\n @dev oracle will mix the hash of the block containing your request into the\n @dev VRF seed it ultimately uses.\n @param _keyHash ID of public key against which randomness is generated\n @param _fee The amount of LINK to send with the request\n @return requestId unique ID for this request\n @dev The returned requestId can be used to distinguish responses to\n @dev concurrent requests. It is passed as the first argument to\n @dev fulfillRandomness."},"id":70,"implemented":true,"kind":"function","modifiers":[],"name":"requestRandomness","nameLocation":"7741:17:0","nodeType":"FunctionDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"_keyHash","nameLocation":"7767:8:0","nodeType":"VariableDeclaration","scope":70,"src":"7759:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":20,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7759:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"_fee","nameLocation":"7785:4:0","nodeType":"VariableDeclaration","scope":70,"src":"7777:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":22,"name":"uint256","nodeType":"ElementaryTypeName","src":"7777:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7758:32:0"},"returnParameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"requestId","nameLocation":"7817:9:0","nodeType":"VariableDeclaration","scope":70,"src":"7809:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7809:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7808:19:0"},"scope":120,"src":"7732:1020:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":73,"mutability":"immutable","name":"LINK","nameLocation":"8794:4:0","nodeType":"VariableDeclaration","scope":120,"src":"8756:42:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"},"typeName":{"id":72,"nodeType":"UserDefinedTypeName","pathNode":{"id":71,"name":"LinkTokenInterface","nodeType":"IdentifierPath","referencedDeclaration":265,"src":"8756:18:0"},"referencedDeclaration":265,"src":"8756:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"8828:14:0","nodeType":"VariableDeclaration","scope":120,"src":"8802:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":74,"name":"address","nodeType":"ElementaryTypeName","src":"8802:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":79,"mutability":"mutable","name":"nonces","nameLocation":"9048:6:0","nodeType":"VariableDeclaration","scope":120,"src":"8982:72:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":78,"keyType":{"id":76,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8990:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"8982:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":77,"name":"uint256","nodeType":"ElementaryTypeName","src":"9001:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":97,"nodeType":"Block","src":"9300:81:0","statements":[{"expression":{"id":89,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":87,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"9306:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":88,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"9323:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9306:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":90,"nodeType":"ExpressionStatement","src":"9306:32:0"},{"expression":{"id":95,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":91,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"9344:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":93,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"9370:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":92,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"9351:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$265_$","typeString":"type(contract LinkTokenInterface)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9351:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"src":"9344:32:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"id":96,"nodeType":"ExpressionStatement","src":"9344:32:0"}]},"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"9059:186:0","text":" @param _vrfCoordinator address of VRFCoordinator contract\n @param _link address of LINK token contract\n @dev https://docs.chain.link/docs/link-token-contracts"},"id":98,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"9268:15:0","nodeType":"VariableDeclaration","scope":98,"src":"9260:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"9260:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"_link","nameLocation":"9293:5:0","nodeType":"VariableDeclaration","scope":98,"src":"9285:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":83,"name":"address","nodeType":"ElementaryTypeName","src":"9285:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9259:40:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"9300:0:0"},"scope":120,"src":"9248:133:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":118,"nodeType":"Block","src":"9654:129:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":106,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9668:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"9668:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":108,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"9682:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9668:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c","id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9698:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445","typeString":"literal_string \"Only VRFCoordinator can fulfill\""},"value":"Only VRFCoordinator can fulfill"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445","typeString":"literal_string \"Only VRFCoordinator can fulfill\""}],"id":105,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9660:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9660:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112,"nodeType":"ExpressionStatement","src":"9660:72:0"},{"expression":{"arguments":[{"id":114,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"9756:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":115,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"9767:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":113,"name":"fulfillRandomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"9738:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9738:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":117,"nodeType":"ExpressionStatement","src":"9738:40:0"}]},"functionSelector":"94985ddd","id":119,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomness","nameLocation":"9585:20:0","nodeType":"FunctionDefinition","parameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"requestId","nameLocation":"9614:9:0","nodeType":"VariableDeclaration","scope":119,"src":"9606:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9606:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"randomness","nameLocation":"9633:10:0","nodeType":"VariableDeclaration","scope":119,"src":"9625:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":101,"name":"uint256","nodeType":"ElementaryTypeName","src":"9625:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9605:39:0"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[],"src":"9654:0:0"},"scope":120,"src":"9576:207:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":121,"src":"5360:4425:0","usedErrors":[]}],"src":"32:9754:0"},"id":0},"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol","exportedSymbols":{"VRFRequestIDBase":[170]},"id":171,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":122,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":170,"linearizedBaseContracts":[170],"name":"VRFRequestIDBase","nameLocation":"66:16:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":149,"nodeType":"Block","src":"947:89:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":141,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"989:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":142,"name":"_userSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"999:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":143,"name":"_requester","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"1010:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":144,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"1022:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":139,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"978:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"978:10:1","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"978:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":138,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"968:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"968:62:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"960:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":136,"name":"uint256","nodeType":"ElementaryTypeName","src":"960:7:1","typeDescriptions":{}}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"960:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":135,"id":148,"nodeType":"Return","src":"953:78:1"}]},"documentation":{"id":123,"nodeType":"StructuredDocumentation","src":"87:706:1","text":" @notice returns the seed which is actually input to the VRF coordinator\n @dev To prevent repetition of VRF output due to repetition of the\n @dev user-supplied seed, that seed is combined in a hash with the\n @dev user-specific nonce, and the address of the consuming contract. The\n @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n @dev the final seed, but the nonce does protect against repetition in\n @dev requests which are included in a single block.\n @param _userSeed VRF seed input provided by user\n @param _requester Address of the requesting contract\n @param _nonce User-specific nonce at the time of the request"},"id":150,"implemented":true,"kind":"function","modifiers":[],"name":"makeVRFInputSeed","nameLocation":"805:16:1","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":125,"mutability":"mutable","name":"_keyHash","nameLocation":"835:8:1","nodeType":"VariableDeclaration","scope":150,"src":"827:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"827:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":127,"mutability":"mutable","name":"_userSeed","nameLocation":"857:9:1","nodeType":"VariableDeclaration","scope":150,"src":"849:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":126,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":129,"mutability":"mutable","name":"_requester","nameLocation":"880:10:1","nodeType":"VariableDeclaration","scope":150,"src":"872:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"_nonce","nameLocation":"904:6:1","nodeType":"VariableDeclaration","scope":150,"src":"896:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":130,"name":"uint256","nodeType":"ElementaryTypeName","src":"896:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:93:1"},"returnParameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":150,"src":"938:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"938:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"937:9:1"},"scope":170,"src":"796:240:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":168,"nodeType":"Block","src":"1512:70:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":163,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"1552:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":164,"name":"_vRFInputSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"1562:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":161,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1535:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1535:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1535:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":160,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1525:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1525:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":159,"id":167,"nodeType":"Return","src":"1518:59:1"}]},"documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"1040:373:1","text":" @notice Returns the id for this request\n @param _keyHash The serviceAgreement ID to be used for this request\n @param _vRFInputSeed The seed to be passed directly to the VRF\n @return The id for this request\n @dev Note that _vRFInputSeed is not the seed passed by the consuming\n @dev contract, but the one generated by makeVRFInputSeed"},"id":169,"implemented":true,"kind":"function","modifiers":[],"name":"makeRequestId","nameLocation":"1425:13:1","nodeType":"FunctionDefinition","parameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"_keyHash","nameLocation":"1447:8:1","nodeType":"VariableDeclaration","scope":169,"src":"1439:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1439:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":155,"mutability":"mutable","name":"_vRFInputSeed","nameLocation":"1465:13:1","nodeType":"VariableDeclaration","scope":169,"src":"1457:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":154,"name":"uint256","nodeType":"ElementaryTypeName","src":"1457:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1438:41:1"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":169,"src":"1503:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":157,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1503:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1502:9:1"},"scope":170,"src":"1416:166:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":171,"src":"57:1527:1","usedErrors":[]}],"src":"32:1553:1"},"id":1},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","exportedSymbols":{"LinkTokenInterface":[265]},"id":266,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":172,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":265,"linearizedBaseContracts":[265],"name":"LinkTokenInterface","nameLocation":"67:18:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"dd62ed3e","id":181,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"99:9:2","nodeType":"FunctionDefinition","parameters":{"id":177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"owner","nameLocation":"117:5:2","nodeType":"VariableDeclaration","scope":181,"src":"109:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":176,"mutability":"mutable","name":"spender","nameLocation":"132:7:2","nodeType":"VariableDeclaration","scope":181,"src":"124:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":175,"name":"address","nodeType":"ElementaryTypeName","src":"124:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"108:32:2"},"returnParameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":179,"mutability":"mutable","name":"remaining","nameLocation":"172:9:2","nodeType":"VariableDeclaration","scope":181,"src":"164:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":178,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"163:19:2"},"scope":265,"src":"90:93:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":190,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"196:7:2","nodeType":"FunctionDefinition","parameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"spender","nameLocation":"212:7:2","nodeType":"VariableDeclaration","scope":190,"src":"204:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":182,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"value","nameLocation":"229:5:2","nodeType":"VariableDeclaration","scope":190,"src":"221:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"221:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"203:32:2"},"returnParameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"success","nameLocation":"259:7:2","nodeType":"VariableDeclaration","scope":190,"src":"254:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":187,"name":"bool","nodeType":"ElementaryTypeName","src":"254:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"253:14:2"},"scope":265,"src":"187:81:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":197,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"281:9:2","nodeType":"FunctionDefinition","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"owner","nameLocation":"299:5:2","nodeType":"VariableDeclaration","scope":197,"src":"291:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":191,"name":"address","nodeType":"ElementaryTypeName","src":"291:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"290:15:2"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":195,"mutability":"mutable","name":"balance","nameLocation":"337:7:2","nodeType":"VariableDeclaration","scope":197,"src":"329:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":194,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"328:17:2"},"scope":265,"src":"272:74:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":202,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"359:8:2","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"367:2:2"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"decimalPlaces","nameLocation":"399:13:2","nodeType":"VariableDeclaration","scope":202,"src":"393:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":199,"name":"uint8","nodeType":"ElementaryTypeName","src":"393:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"392:21:2"},"scope":265,"src":"350:64:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"66188463","id":211,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseApproval","nameLocation":"427:16:2","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"spender","nameLocation":"452:7:2","nodeType":"VariableDeclaration","scope":211,"src":"444:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"444:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"addedValue","nameLocation":"469:10:2","nodeType":"VariableDeclaration","scope":211,"src":"461:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":205,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"443:37:2"},"returnParameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"success","nameLocation":"504:7:2","nodeType":"VariableDeclaration","scope":211,"src":"499:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":208,"name":"bool","nodeType":"ElementaryTypeName","src":"499:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"498:14:2"},"scope":265,"src":"418:95:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d73dd623","id":218,"implemented":false,"kind":"function","modifiers":[],"name":"increaseApproval","nameLocation":"526:16:2","nodeType":"FunctionDefinition","parameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"spender","nameLocation":"551:7:2","nodeType":"VariableDeclaration","scope":218,"src":"543:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":212,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":215,"mutability":"mutable","name":"subtractedValue","nameLocation":"568:15:2","nodeType":"VariableDeclaration","scope":218,"src":"560:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":214,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"542:42:2"},"returnParameters":{"id":217,"nodeType":"ParameterList","parameters":[],"src":"593:0:2"},"scope":265,"src":"517:77:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06fdde03","id":223,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"607:4:2","nodeType":"FunctionDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[],"src":"611:2:2"},"returnParameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"mutability":"mutable","name":"tokenName","nameLocation":"651:9:2","nodeType":"VariableDeclaration","scope":223,"src":"637:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":220,"name":"string","nodeType":"ElementaryTypeName","src":"637:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"636:25:2"},"scope":265,"src":"598:64:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":228,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"675:6:2","nodeType":"FunctionDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[],"src":"681:2:2"},"returnParameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"tokenSymbol","nameLocation":"721:11:2","nodeType":"VariableDeclaration","scope":228,"src":"707:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":225,"name":"string","nodeType":"ElementaryTypeName","src":"707:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"706:27:2"},"scope":265,"src":"666:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":233,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"747:11:2","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"758:2:2"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"totalTokensIssued","nameLocation":"792:17:2","nodeType":"VariableDeclaration","scope":233,"src":"784:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":230,"name":"uint256","nodeType":"ElementaryTypeName","src":"784:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"783:27:2"},"scope":265,"src":"738:73:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":242,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"824:8:2","nodeType":"FunctionDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":235,"mutability":"mutable","name":"to","nameLocation":"841:2:2","nodeType":"VariableDeclaration","scope":242,"src":"833:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"833:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":237,"mutability":"mutable","name":"value","nameLocation":"853:5:2","nodeType":"VariableDeclaration","scope":242,"src":"845:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:27:2"},"returnParameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"success","nameLocation":"883:7:2","nodeType":"VariableDeclaration","scope":242,"src":"878:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":239,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"877:14:2"},"scope":265,"src":"815:77:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4000aea0","id":253,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"905:15:2","nodeType":"FunctionDefinition","parameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":244,"mutability":"mutable","name":"to","nameLocation":"934:2:2","nodeType":"VariableDeclaration","scope":253,"src":"926:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":243,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"value","nameLocation":"950:5:2","nodeType":"VariableDeclaration","scope":253,"src":"942:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":245,"name":"uint256","nodeType":"ElementaryTypeName","src":"942:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":248,"mutability":"mutable","name":"data","nameLocation":"976:4:2","nodeType":"VariableDeclaration","scope":253,"src":"961:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":247,"name":"bytes","nodeType":"ElementaryTypeName","src":"961:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"920:64:2"},"returnParameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"success","nameLocation":"1008:7:2","nodeType":"VariableDeclaration","scope":253,"src":"1003:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":250,"name":"bool","nodeType":"ElementaryTypeName","src":"1003:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1002:14:2"},"scope":265,"src":"896:121:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":264,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1030:12:2","nodeType":"FunctionDefinition","parameters":{"id":260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"from","nameLocation":"1056:4:2","nodeType":"VariableDeclaration","scope":264,"src":"1048:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":254,"name":"address","nodeType":"ElementaryTypeName","src":"1048:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"to","nameLocation":"1074:2:2","nodeType":"VariableDeclaration","scope":264,"src":"1066:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"1066:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":259,"mutability":"mutable","name":"value","nameLocation":"1090:5:2","nodeType":"VariableDeclaration","scope":264,"src":"1082:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":258,"name":"uint256","nodeType":"ElementaryTypeName","src":"1082:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:57:2"},"returnParameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"success","nameLocation":"1123:7:2","nodeType":"VariableDeclaration","scope":264,"src":"1118:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":261,"name":"bool","nodeType":"ElementaryTypeName","src":"1118:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1117:14:2"},"scope":265,"src":"1021:111:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":266,"src":"57:1077:2","usedErrors":[]}],"src":"32:1103:2"},"id":2},"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","exportedSymbols":{"LinkTokenInterface":[265],"VRFConsumerBase":[120],"VRFCoordinatorMock":[384],"VRFRequestIDBase":[170]},"id":385,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":267,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","file":"../interfaces/LinkTokenInterface.sol","id":268,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":266,"src":"57:46:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol","file":"../VRFConsumerBase.sol","id":269,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":121,"src":"104:32:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":384,"linearizedBaseContracts":[384],"name":"VRFCoordinatorMock","nameLocation":"147:18:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"1b6b6d23","id":272,"mutability":"mutable","name":"LINK","nameLocation":"196:4:3","nodeType":"VariableDeclaration","scope":384,"src":"170:30:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"},"typeName":{"id":271,"nodeType":"UserDefinedTypeName","pathNode":{"id":270,"name":"LinkTokenInterface","nodeType":"IdentifierPath","referencedDeclaration":265,"src":"170:18:3"},"referencedDeclaration":265,"src":"170:18:3","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"visibility":"public"},{"anonymous":false,"id":280,"name":"RandomnessRequest","nameLocation":"211:17:3","nodeType":"EventDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"245:6:3","nodeType":"VariableDeclaration","scope":280,"src":"229:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":273,"name":"address","nodeType":"ElementaryTypeName","src":"229:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":276,"indexed":true,"mutability":"mutable","name":"keyHash","nameLocation":"269:7:3","nodeType":"VariableDeclaration","scope":280,"src":"253:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"253:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":278,"indexed":true,"mutability":"mutable","name":"seed","nameLocation":"294:4:3","nodeType":"VariableDeclaration","scope":280,"src":"278:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"278:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"228:71:3"},"src":"205:95:3"},{"body":{"id":291,"nodeType":"Block","src":"344:49:3","statements":[{"expression":{"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":285,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"350:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":287,"name":"linkAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"376:11:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":286,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"357:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$265_$","typeString":"type(contract LinkTokenInterface)"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"357:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"src":"350:38:3","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}},"id":290,"nodeType":"ExpressionStatement","src":"350:38:3"}]},"id":292,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"linkAddress","nameLocation":"324:11:3","nodeType":"VariableDeclaration","scope":292,"src":"316:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"316:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"315:21:3"},"returnParameters":{"id":284,"nodeType":"ParameterList","parameters":[],"src":"344:0:3"},"scope":384,"src":"304:89:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":323,"nodeType":"Block","src":"503:133:3","statements":[{"assignments":[304,306],"declarations":[{"constant":false,"id":304,"mutability":"mutable","name":"keyHash","nameLocation":"518:7:3","nodeType":"VariableDeclaration","scope":323,"src":"510:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"510:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"seed","nameLocation":"535:4:3","nodeType":"VariableDeclaration","scope":323,"src":"527:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":305,"name":"uint256","nodeType":"ElementaryTypeName","src":"527:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":316,"initialValue":{"arguments":[{"id":309,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"554:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"562:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"562:7:3","typeDescriptions":{}}},{"id":313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"571:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":312,"name":"uint256","nodeType":"ElementaryTypeName","src":"571:7:3","typeDescriptions":{}}}],"id":314,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"561:18:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32),type(uint256))"}],"expression":{"id":307,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"543:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"543:10:3","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"543:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_uint256_$","typeString":"tuple(bytes32,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"509:71:3"},{"eventCall":{"arguments":[{"id":318,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"609:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":319,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"617:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":320,"name":"seed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"626:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":317,"name":"RandomnessRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"591:17:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,uint256)"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"591:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":322,"nodeType":"EmitStatement","src":"586:45:3"}]},"functionSelector":"a4c0ed36","id":324,"implemented":true,"kind":"function","modifiers":[{"id":301,"kind":"modifierInvocation","modifierName":{"id":300,"name":"onlyLINK","nodeType":"IdentifierPath","referencedDeclaration":383,"src":"494:8:3"},"nodeType":"ModifierInvocation","src":"494:8:3"}],"name":"onTokenTransfer","nameLocation":"406:15:3","nodeType":"FunctionDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"sender","nameLocation":"435:6:3","nodeType":"VariableDeclaration","scope":324,"src":"427:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":296,"mutability":"mutable","name":"fee","nameLocation":"455:3:3","nodeType":"VariableDeclaration","scope":324,"src":"447:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":298,"mutability":"mutable","name":"_data","nameLocation":"477:5:3","nodeType":"VariableDeclaration","scope":324,"src":"464:18:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":297,"name":"bytes","nodeType":"ElementaryTypeName","src":"464:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"421:65:3"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[],"src":"503:0:3"},"scope":384,"src":"397:239:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":367,"nodeType":"Block","src":"760:268:3","statements":[{"assignments":[335],"declarations":[{"constant":false,"id":335,"mutability":"mutable","name":"v","nameLocation":"782:1:3","nodeType":"VariableDeclaration","scope":367,"src":"766:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"},"typeName":{"id":334,"nodeType":"UserDefinedTypeName","pathNode":{"id":333,"name":"VRFConsumerBase","nodeType":"IdentifierPath","referencedDeclaration":120,"src":"766:15:3"},"referencedDeclaration":120,"src":"766:15:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}},"visibility":"internal"}],"id":336,"nodeType":"VariableDeclarationStatement","src":"766:17:3"},{"assignments":[338],"declarations":[{"constant":false,"id":338,"mutability":"mutable","name":"resp","nameLocation":"802:4:3","nodeType":"VariableDeclaration","scope":367,"src":"789:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":337,"name":"bytes","nodeType":"ElementaryTypeName","src":"789:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":347,"initialValue":{"arguments":[{"expression":{"expression":{"id":341,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"832:1:3","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"rawFulfillRandomness","nodeType":"MemberAccess","referencedDeclaration":119,"src":"832:22:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256) external"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"832:31:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":344,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"865:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":345,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"876:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":339,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"809:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"809:22:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"809:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"789:98:3"},{"assignments":[349],"declarations":[{"constant":false,"id":349,"mutability":"mutable","name":"b","nameLocation":"901:1:3","nodeType":"VariableDeclaration","scope":367,"src":"893:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":348,"name":"uint256","nodeType":"ElementaryTypeName","src":"893:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":351,"initialValue":{"hexValue":"323036303030","id":350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"905:6:3","typeDescriptions":{"typeIdentifier":"t_rational_206000_by_1","typeString":"int_const 206000"},"value":"206000"},"nodeType":"VariableDeclarationStatement","src":"893:18:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":353,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"925:7:3","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"925:9:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":355,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"938:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"925:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f7420656e6f7567682067617320666f7220636f6e73756d6572","id":357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"941:29:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","typeString":"literal_string \"not enough gas for consumer\""},"value":"not enough gas for consumer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","typeString":"literal_string \"not enough gas for consumer\""}],"id":352,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"917:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"917:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":359,"nodeType":"ExpressionStatement","src":"917:54:3"},{"assignments":[361,null],"declarations":[{"constant":false,"id":361,"mutability":"mutable","name":"success","nameLocation":"983:7:3","nodeType":"VariableDeclaration","scope":367,"src":"978:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":360,"name":"bool","nodeType":"ElementaryTypeName","src":"978:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":366,"initialValue":{"arguments":[{"id":364,"name":"resp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"1018:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":362,"name":"consumerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"996:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"996:21:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"996:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"977:46:3"}]},"functionSelector":"cf55fe97","id":368,"implemented":true,"kind":"function","modifiers":[],"name":"callBackWithRandomness","nameLocation":"649:22:3","nodeType":"FunctionDefinition","parameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":326,"mutability":"mutable","name":"requestId","nameLocation":"685:9:3","nodeType":"VariableDeclaration","scope":368,"src":"677:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":325,"name":"bytes32","nodeType":"ElementaryTypeName","src":"677:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":328,"mutability":"mutable","name":"randomness","nameLocation":"708:10:3","nodeType":"VariableDeclaration","scope":368,"src":"700:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":327,"name":"uint256","nodeType":"ElementaryTypeName","src":"700:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":330,"mutability":"mutable","name":"consumerContract","nameLocation":"732:16:3","nodeType":"VariableDeclaration","scope":368,"src":"724:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":329,"name":"address","nodeType":"ElementaryTypeName","src":"724:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"671:81:3"},"returnParameters":{"id":332,"nodeType":"ParameterList","parameters":[],"src":"760:0:3"},"scope":384,"src":"640:388:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":382,"nodeType":"Block","src":"1052:77:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":371,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1066:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1066:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":375,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"1088:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LinkTokenInterface_$265","typeString":"contract LinkTokenInterface"}],"id":374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1080:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"1080:7:3","typeDescriptions":{}}},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1080:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1066:27:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d75737420757365204c494e4b20746f6b656e","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1095:21:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","typeString":"literal_string \"Must use LINK token\""},"value":"Must use LINK token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","typeString":"literal_string \"Must use LINK token\""}],"id":370,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1058:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1058:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":380,"nodeType":"ExpressionStatement","src":"1058:59:3"},{"id":381,"nodeType":"PlaceholderStatement","src":"1123:1:3"}]},"id":383,"name":"onlyLINK","nameLocation":"1041:8:3","nodeType":"ModifierDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[],"src":"1049:2:3"},"src":"1032:97:3","virtual":false,"visibility":"internal"}],"scope":385,"src":"138:993:3","usedErrors":[]}],"src":"32:1100:3"},"id":3},"contracts/test/VRFCoordinatorV2Mock.sol":{"ast":{"absolutePath":"contracts/test/VRFCoordinatorV2Mock.sol","exportedSymbols":{"LinkTokenInterface":[265],"VRFConsumerBase":[120],"VRFCoordinatorMock":[384],"VRFRequestIDBase":[170]},"id":388,"nodeType":"SourceUnit","nodes":[{"id":386,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"30:23:4"},{"absolutePath":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","file":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","id":387,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":388,"sourceUnit":385,"src":"55:68:4","symbolAliases":[],"unitAlias":""}],"src":"30:94:4"},"id":4}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol":{"VRFConsumerBase":{"abi":[{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator, _link) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash), and have told you the minimum LINKprice for VRF service. Make sure your contract has sufficient LINK, andcall requestRandomness(keyHash, fee, seed), where seed is the input youwant to generate randomness from.Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomness method.The randomness argument to fulfillRandomness is the actual random valuegenerated from your seed.The requestId argument is generated from the keyHash and the seed bymakeRequestId(keyHash, seed). If your contract could have concurrentrequests open, you can use the requestId to track which seed isassociated with which randomness. See VRFRequestIDBase.sol for moredetails. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.)Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. (Which is critical to making unpredictable randomness! See thenext section.) *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the ultimate input to the VRF is mixed with the block hash of theblock in which the request is made, user-provided seeds have no impacton its economic security properties. They are only included for APIcompatability with previous versions of this contract.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request.","kind":"dev","methods":{"constructor":{"details":"https://docs.chain.link/docs/link-token-contracts","params":{"_link":"address of LINK token contract","_vrfCoordinator":"address of VRFCoordinator contract"}}},"stateVariables":{"USER_SEED_PLACEHOLDER":{"details":"In order to keep backwards compatibility we have kept the user seed field around. We remove the use of it because given that the blockhash enters later, it overrides whatever randomness the used seed provides. Given that it adds no security, and can easily lead to misunderstandings, we have removed it from usage and can now provide a simpler API."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomness(bytes32,uint256)":"94985ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator, _link) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash), and have told you the minimum LINKprice for VRF service. Make sure your contract has sufficient LINK, andcall requestRandomness(keyHash, fee, seed), where seed is the input youwant to generate randomness from.Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomness method.The randomness argument to fulfillRandomness is the actual random valuegenerated from your seed.The requestId argument is generated from the keyHash and the seed bymakeRequestId(keyHash, seed). If your contract could have concurrentrequests open, you can use the requestId to track which seed isassociated with which randomness. See VRFRequestIDBase.sol for moredetails. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.)Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. (Which is critical to making unpredictable randomness! See thenext section.) *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the ultimate input to the VRF is mixed with the block hash of theblock in which the request is made, user-provided seeds have no impacton its economic security properties. They are only included for APIcompatability with previous versions of this contract.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"https://docs.chain.link/docs/link-token-contracts\",\"params\":{\"_link\":\"address of LINK token contract\",\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"stateVariables\":{\"USER_SEED_PLACEHOLDER\":{\"details\":\"In order to keep backwards compatibility we have kept the user seed field around. We remove the use of it because given that the blockhash enters later, it overrides whatever randomness the used seed provides. Given that it adds no security, and can easily lead to misunderstandings, we have removed it from usage and can now provide a simpler API.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":\"VRFConsumerBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":79,"contract":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:VRFConsumerBase","label":"nonces","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint256)"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol":{"VRFRequestIDBase":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220afa09e35821c74dbe3634e19ceea3e305e8e2e5f7eb5708695e60083c91ea08364736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF LOG0 SWAP15 CALLDATALOAD DUP3 SHR PUSH21 0xDBE3634E19CEEA3E305E8E2E5F7EB5708695E60083 0xC9 0x1E LOG0 DUP4 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"57:1527:1:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220afa09e35821c74dbe3634e19ceea3e305e8e2e5f7eb5708695e60083c91ea08364736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF LOG0 SWAP15 CALLDATALOAD DUP3 SHR PUSH21 0xDBE3634E19CEEA3E305E8E2E5F7EB5708695E60083 0xC9 0x1E LOG0 DUP4 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"57:1527:1:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"makeRequestId(bytes32,uint256)":"infinite","makeVRFInputSeed(bytes32,uint256,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":\"VRFRequestIDBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"LinkTokenInterface":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"decimalPlaces","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"increaseApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalTokensIssued","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseApproval(address,uint256)":"66188463","increaseApproval(address,uint256)":"d73dd623","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensIssued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":\"LinkTokenInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol":{"VRFCoordinatorMock":{"abi":[{"inputs":[{"internalType":"address","name":"linkAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"seed","type":"uint256"}],"name":"RandomnessRequest","type":"event"},{"inputs":[],"name":"LINK","outputs":[{"internalType":"contract LinkTokenInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"},{"internalType":"address","name":"consumerContract","type":"address"}],"name":"callBackWithRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onTokenTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_292":{"entryPoint":null,"id":292,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":120,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":141,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":186,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":204,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":236,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":241,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1199:5","statements":[{"body":{"nodeType":"YulBlock","src":"70:80:5","statements":[{"nodeType":"YulAssignment","src":"80:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"89:5:5"},"nodeType":"YulFunctionCall","src":"89:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"80:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"138:5:5"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"111:26:5"},"nodeType":"YulFunctionCall","src":"111:33:5"},"nodeType":"YulExpressionStatement","src":"111:33:5"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"56:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:5","type":""}],"src":"7:143:5"},{"body":{"nodeType":"YulBlock","src":"233:274:5","statements":[{"body":{"nodeType":"YulBlock","src":"279:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"281:77:5"},"nodeType":"YulFunctionCall","src":"281:79:5"},"nodeType":"YulExpressionStatement","src":"281:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"254:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"263:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"250:3:5"},"nodeType":"YulFunctionCall","src":"250:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"275:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"246:3:5"},"nodeType":"YulFunctionCall","src":"246:32:5"},"nodeType":"YulIf","src":"243:119:5"},{"nodeType":"YulBlock","src":"372:128:5","statements":[{"nodeType":"YulVariableDeclaration","src":"387:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"401:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"391:6:5","type":""}]},{"nodeType":"YulAssignment","src":"416:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"473:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:5"},"nodeType":"YulFunctionCall","src":"458:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"482:7:5"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"426:31:5"},"nodeType":"YulFunctionCall","src":"426:64:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"416:6:5"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"203:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"214:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"226:6:5","type":""}],"src":"156:351:5"},{"body":{"nodeType":"YulBlock","src":"553:35:5","statements":[{"nodeType":"YulAssignment","src":"563:19:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"579:2:5","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"573:5:5"},"nodeType":"YulFunctionCall","src":"573:9:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"563:6:5"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"546:6:5","type":""}],"src":"513:75:5"},{"body":{"nodeType":"YulBlock","src":"639:51:5","statements":[{"nodeType":"YulAssignment","src":"649:35:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"678:5:5"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"660:17:5"},"nodeType":"YulFunctionCall","src":"660:24:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"649:7:5"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"621:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"631:7:5","type":""}],"src":"594:96:5"},{"body":{"nodeType":"YulBlock","src":"741:81:5","statements":[{"nodeType":"YulAssignment","src":"751:65:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"766:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"773:42:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"762:3:5"},"nodeType":"YulFunctionCall","src":"762:54:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"751:7:5"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"723:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"733:7:5","type":""}],"src":"696:126:5"},{"body":{"nodeType":"YulBlock","src":"917:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"934:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"937:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"927:6:5"},"nodeType":"YulFunctionCall","src":"927:12:5"},"nodeType":"YulExpressionStatement","src":"927:12:5"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"828:117:5"},{"body":{"nodeType":"YulBlock","src":"1040:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1057:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1060:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1050:6:5"},"nodeType":"YulFunctionCall","src":"1050:12:5"},"nodeType":"YulExpressionStatement","src":"1050:12:5"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"951:117:5"},{"body":{"nodeType":"YulBlock","src":"1117:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"1174:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1183:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1186:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1176:6:5"},"nodeType":"YulFunctionCall","src":"1176:12:5"},"nodeType":"YulExpressionStatement","src":"1176:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1140:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1165:5:5"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1147:17:5"},"nodeType":"YulFunctionCall","src":"1147:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1137:2:5"},"nodeType":"YulFunctionCall","src":"1137:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1130:6:5"},"nodeType":"YulFunctionCall","src":"1130:43:5"},"nodeType":"YulIf","src":"1127:63:5"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1110:5:5","type":""}],"src":"1074:122:5"}]},"contents":"{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n","id":5,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516109b13803806109b18339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600081519050610087816100f1565b92915050565b6000602082840312156100a3576100a26100ec565b5b60006100b184828501610078565b91505092915050565b60006100c5826100cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fa816100ba565b811461010557600080fd5b50565b61089a806101176000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed3614610064578063cf55fe9714610080575b600080fd5b61004e61009c565b60405161005b91906105b2565b60405180910390f35b61007e600480360381019061007991906103cc565b6100c0565b005b61009a6004803603810190610095919061047b565b6101b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610145906105ed565b60405180910390fd5b60008082806020019051810190610165919061043b565b9150915080828673ffffffffffffffffffffffffffffffffffffffff167f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c60405160405180910390a45050505050565b6000806394985ddd60e01b85856040516024016101d3929190610589565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000620324b09050805a101561027d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610274906105cd565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16836040516102a49190610572565b6000604051808303816000865af19150503d80600081146102e1576040519150601f19603f3d011682016040523d82523d6000602084013e6102e6565b606091505b5050905050505050505050565b600061030661030184610632565b61060d565b905082815260208101848484011115610322576103216107ad565b5b61032d848285610706565b509392505050565b6000813590506103448161081f565b92915050565b60008135905061035981610836565b92915050565b60008151905061036e81610836565b92915050565b600082601f830112610389576103886107a8565b5b81356103998482602086016102f3565b91505092915050565b6000813590506103b18161084d565b92915050565b6000815190506103c68161084d565b92915050565b6000806000606084860312156103e5576103e46107b7565b5b60006103f386828701610335565b9350506020610404868287016103a2565b925050604084013567ffffffffffffffff811115610425576104246107b2565b5b61043186828701610374565b9150509250925092565b60008060408385031215610452576104516107b7565b5b60006104608582860161035f565b9250506020610471858286016103b7565b9150509250929050565b600080600060608486031215610494576104936107b7565b5b60006104a28682870161034a565b93505060206104b3868287016103a2565b92505060406104c486828701610335565b9150509250925092565b6104d78161069c565b82525050565b60006104e882610663565b6104f2818561066e565b9350610502818560208601610715565b80840191505092915050565b610517816106d0565b82525050565b600061052a601b83610679565b9150610535826107cd565b602082019050919050565b600061054d601383610679565b9150610558826107f6565b602082019050919050565b61056c816106c6565b82525050565b600061057e82846104dd565b915081905092915050565b600060408201905061059e60008301856104ce565b6105ab6020830184610563565b9392505050565b60006020820190506105c7600083018461050e565b92915050565b600060208201905081810360008301526105e68161051d565b9050919050565b6000602082019050818103600083015261060681610540565b9050919050565b6000610617610628565b90506106238282610748565b919050565b6000604051905090565b600067ffffffffffffffff82111561064d5761064c610779565b5b610656826107bc565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610695826106a6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106db826106e2565b9050919050565b60006106ed826106f4565b9050919050565b60006106ff826106a6565b9050919050565b82818337600083830152505050565b60005b83811015610733578082015181840152602081019050610718565b83811115610742576000848401525b50505050565b610751826107bc565b810181811067ffffffffffffffff821117156107705761076f610779565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6e6f7420656e6f7567682067617320666f7220636f6e73756d65720000000000600082015250565b7f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000600082015250565b6108288161068a565b811461083357600080fd5b50565b61083f8161069c565b811461084a57600080fd5b50565b610856816106c6565b811461086157600080fd5b5056fea2646970667358221220fa51051756dda7c536fd2c6c12ebee0f7566e576e79c2110e719e902875d72b764736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x9B1 CODESIZE SUB DUP1 PUSH2 0x9B1 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x108 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x87 DUP2 PUSH2 0xF1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA3 JUMPI PUSH2 0xA2 PUSH2 0xEC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB1 DUP5 DUP3 DUP6 ADD PUSH2 0x78 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC5 DUP3 PUSH2 0xCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFA DUP2 PUSH2 0xBA JUMP JUMPDEST DUP2 EQ PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x89A DUP1 PUSH2 0x117 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B6B6D23 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xCF55FE97 EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x79 SWAP2 SWAP1 PUSH2 0x3CC JUMP JUMPDEST PUSH2 0xC0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x95 SWAP2 SWAP1 PUSH2 0x47B JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x43B JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7A9A0A6960D95B32CDED93C30E63E7C2EB9E877230813C172110EA54DC1C915C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x94985DDD PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D3 SWAP3 SWAP2 SWAP1 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH3 0x324B0 SWAP1 POP DUP1 GAS LT ISZERO PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x274 SWAP1 PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x572 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306 PUSH2 0x301 DUP5 PUSH2 0x632 JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x322 JUMPI PUSH2 0x321 PUSH2 0x7AD JUMP JUMPDEST JUMPDEST PUSH2 0x32D DUP5 DUP3 DUP6 PUSH2 0x706 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x344 DUP2 PUSH2 0x81F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x359 DUP2 PUSH2 0x836 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x36E DUP2 PUSH2 0x836 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x389 JUMPI PUSH2 0x388 PUSH2 0x7A8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x399 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2F3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3B1 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3C6 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E5 JUMPI PUSH2 0x3E4 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP7 DUP3 DUP8 ADD PUSH2 0x335 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x404 DUP7 DUP3 DUP8 ADD PUSH2 0x3A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x425 JUMPI PUSH2 0x424 PUSH2 0x7B2 JUMP JUMPDEST JUMPDEST PUSH2 0x431 DUP7 DUP3 DUP8 ADD PUSH2 0x374 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x452 JUMPI PUSH2 0x451 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x460 DUP6 DUP3 DUP7 ADD PUSH2 0x35F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x471 DUP6 DUP3 DUP7 ADD PUSH2 0x3B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x494 JUMPI PUSH2 0x493 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4A2 DUP7 DUP3 DUP8 ADD PUSH2 0x34A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x4B3 DUP7 DUP3 DUP8 ADD PUSH2 0x3A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x4C4 DUP7 DUP3 DUP8 ADD PUSH2 0x335 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x4D7 DUP2 PUSH2 0x69C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E8 DUP3 PUSH2 0x663 JUMP JUMPDEST PUSH2 0x4F2 DUP2 DUP6 PUSH2 0x66E JUMP JUMPDEST SWAP4 POP PUSH2 0x502 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x715 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x6D0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52A PUSH1 0x1B DUP4 PUSH2 0x679 JUMP JUMPDEST SWAP2 POP PUSH2 0x535 DUP3 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54D PUSH1 0x13 DUP4 PUSH2 0x679 JUMP JUMPDEST SWAP2 POP PUSH2 0x558 DUP3 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x56C DUP2 PUSH2 0x6C6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57E DUP3 DUP5 PUSH2 0x4DD JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x59E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x4CE JUMP JUMPDEST PUSH2 0x5AB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x563 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5C7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x50E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5E6 DUP2 PUSH2 0x51D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x606 DUP2 PUSH2 0x540 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x617 PUSH2 0x628 JUMP JUMPDEST SWAP1 POP PUSH2 0x623 DUP3 DUP3 PUSH2 0x748 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x64D JUMPI PUSH2 0x64C PUSH2 0x779 JUMP JUMPDEST JUMPDEST PUSH2 0x656 DUP3 PUSH2 0x7BC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x695 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DB DUP3 PUSH2 0x6E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6ED DUP3 PUSH2 0x6F4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6FF DUP3 PUSH2 0x6A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x733 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x718 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x742 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x751 DUP3 PUSH2 0x7BC JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x770 JUMPI PUSH2 0x76F PUSH2 0x779 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4D75737420757365204C494E4B20746F6B656E00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x828 DUP2 PUSH2 0x68A JUMP JUMPDEST DUP2 EQ PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x83F DUP2 PUSH2 0x69C JUMP JUMPDEST DUP2 EQ PUSH2 0x84A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x856 DUP2 PUSH2 0x6C6 JUMP JUMPDEST DUP2 EQ PUSH2 0x861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL MLOAD SDIV OR JUMP 0xDD 0xA7 0xC5 CALLDATASIZE REVERT 0x2C PUSH13 0x12EBEE0F7566E576E79C2110E7 NOT 0xE9 MUL DUP8 0x5D PUSH19 0xB764736F6C6343000807003300000000000000 ","sourceMap":"138:993:3:-:0;;;304:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;376:11;350:4;;:38;;;;;;;;;;;;;;;;;;304:89;138:993;;7:143:5;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:351::-;226:6;275:2;263:9;254:7;250:23;246:32;243:119;;;281:79;;:::i;:::-;243:119;401:1;426:64;482:7;473:6;462:9;458:22;426:64;:::i;:::-;416:74;;372:128;156:351;;;;:::o;594:96::-;631:7;660:24;678:5;660:24;:::i;:::-;649:35;;594:96;;;:::o;696:126::-;733:7;773:42;766:5;762:54;751:65;;696:126;;;:::o;951:117::-;1060:1;1057;1050:12;1074:122;1147:24;1165:5;1147:24;:::i;:::-;1140:5;1137:35;1127:63;;1186:1;1183;1176:12;1127:63;1074:122;:::o;138:993:3:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@LINK_272":{"entryPoint":156,"id":272,"parameterSlots":0,"returnSlots":0},"@callBackWithRandomness_368":{"entryPoint":437,"id":368,"parameterSlots":3,"returnSlots":0},"@onTokenTransfer_324":{"entryPoint":192,"id":324,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":755,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":821,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":842,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":884,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":930,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":951,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr":{"entryPoint":972,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_uint256_fromMemory":{"entryPoint":1083,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256t_address":{"entryPoint":1147,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":1230,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":1245,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_LinkTokenInterface_$265_to_t_address_fromStack":{"entryPoint":1294,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack":{"entryPoint":1309,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack":{"entryPoint":1344,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":1379,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":1394,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":1417,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_LinkTokenInterface_$265__to_t_address__fromStack_reversed":{"entryPoint":1458,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1485,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1517,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":1549,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1576,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":1586,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":1635,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":1646,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1657,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1674,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":1692,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1702,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1734,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_LinkTokenInterface_$265_to_t_address":{"entryPoint":1744,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":1762,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":1780,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":1798,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":1813,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":1864,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x41":{"entryPoint":1913,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1960,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":1965,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1970,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1975,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1980,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7":{"entryPoint":1997,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7":{"entryPoint":2038,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2079,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2102,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2125,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10814:5","statements":[{"body":{"nodeType":"YulBlock","src":"90:327:5","statements":[{"nodeType":"YulAssignment","src":"100:74:5","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:5"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:5"},"nodeType":"YulFunctionCall","src":"125:48:5"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:5"},"nodeType":"YulFunctionCall","src":"109:65:5"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:5"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:5"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:5"},"nodeType":"YulFunctionCall","src":"183:21:5"},"nodeType":"YulExpressionStatement","src":"183:21:5"},{"nodeType":"YulVariableDeclaration","src":"213:27:5","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:5"},"nodeType":"YulFunctionCall","src":"224:16:5"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"280:77:5"},"nodeType":"YulFunctionCall","src":"280:79:5"},"nodeType":"YulExpressionStatement","src":"280:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:5"},"nodeType":"YulFunctionCall","src":"255:16:5"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:5"},"nodeType":"YulFunctionCall","src":"252:25:5"},"nodeType":"YulIf","src":"249:112:5"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"394:3:5"},{"name":"dst","nodeType":"YulIdentifier","src":"399:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"404:6:5"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"370:23:5"},"nodeType":"YulFunctionCall","src":"370:41:5"},"nodeType":"YulExpressionStatement","src":"370:41:5"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:5","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:5","type":""}],"src":"7:410:5"},{"body":{"nodeType":"YulBlock","src":"475:87:5","statements":[{"nodeType":"YulAssignment","src":"485:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"507:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"494:12:5"},"nodeType":"YulFunctionCall","src":"494:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"485:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:5"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"523:26:5"},"nodeType":"YulFunctionCall","src":"523:33:5"},"nodeType":"YulExpressionStatement","src":"523:33:5"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"453:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"461:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"469:5:5","type":""}],"src":"423:139:5"},{"body":{"nodeType":"YulBlock","src":"620:87:5","statements":[{"nodeType":"YulAssignment","src":"630:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"652:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"639:12:5"},"nodeType":"YulFunctionCall","src":"639:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"630:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"695:5:5"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"668:26:5"},"nodeType":"YulFunctionCall","src":"668:33:5"},"nodeType":"YulExpressionStatement","src":"668:33:5"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"598:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"606:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"614:5:5","type":""}],"src":"568:139:5"},{"body":{"nodeType":"YulBlock","src":"776:80:5","statements":[{"nodeType":"YulAssignment","src":"786:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"801:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"795:5:5"},"nodeType":"YulFunctionCall","src":"795:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"786:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"844:5:5"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"817:26:5"},"nodeType":"YulFunctionCall","src":"817:33:5"},"nodeType":"YulExpressionStatement","src":"817:33:5"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"754:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"762:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"770:5:5","type":""}],"src":"713:143:5"},{"body":{"nodeType":"YulBlock","src":"936:277:5","statements":[{"body":{"nodeType":"YulBlock","src":"985:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"987:77:5"},"nodeType":"YulFunctionCall","src":"987:79:5"},"nodeType":"YulExpressionStatement","src":"987:79:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"964:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"972:4:5","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"960:3:5"},"nodeType":"YulFunctionCall","src":"960:17:5"},{"name":"end","nodeType":"YulIdentifier","src":"979:3:5"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"956:3:5"},"nodeType":"YulFunctionCall","src":"956:27:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"949:6:5"},"nodeType":"YulFunctionCall","src":"949:35:5"},"nodeType":"YulIf","src":"946:122:5"},{"nodeType":"YulVariableDeclaration","src":"1077:34:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1104:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1091:12:5"},"nodeType":"YulFunctionCall","src":"1091:20:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1081:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1120:87:5","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1180:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"1188:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1176:3:5"},"nodeType":"YulFunctionCall","src":"1176:17:5"},{"name":"length","nodeType":"YulIdentifier","src":"1195:6:5"},{"name":"end","nodeType":"YulIdentifier","src":"1203:3:5"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1129:46:5"},"nodeType":"YulFunctionCall","src":"1129:78:5"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1120:5:5"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"922:3:5","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"930:5:5","type":""}],"src":"875:338:5"},{"body":{"nodeType":"YulBlock","src":"1271:87:5","statements":[{"nodeType":"YulAssignment","src":"1281:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1303:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1290:12:5"},"nodeType":"YulFunctionCall","src":"1290:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1281:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1346:5:5"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1319:26:5"},"nodeType":"YulFunctionCall","src":"1319:33:5"},"nodeType":"YulExpressionStatement","src":"1319:33:5"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1249:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"1257:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1265:5:5","type":""}],"src":"1219:139:5"},{"body":{"nodeType":"YulBlock","src":"1427:80:5","statements":[{"nodeType":"YulAssignment","src":"1437:22:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1452:6:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1446:5:5"},"nodeType":"YulFunctionCall","src":"1446:13:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1437:5:5"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1495:5:5"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1468:26:5"},"nodeType":"YulFunctionCall","src":"1468:33:5"},"nodeType":"YulExpressionStatement","src":"1468:33:5"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1405:6:5","type":""},{"name":"end","nodeType":"YulTypedName","src":"1413:3:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1421:5:5","type":""}],"src":"1364:143:5"},{"body":{"nodeType":"YulBlock","src":"1622:688:5","statements":[{"body":{"nodeType":"YulBlock","src":"1668:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1670:77:5"},"nodeType":"YulFunctionCall","src":"1670:79:5"},"nodeType":"YulExpressionStatement","src":"1670:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1643:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"1652:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1639:3:5"},"nodeType":"YulFunctionCall","src":"1639:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"1664:2:5","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1635:3:5"},"nodeType":"YulFunctionCall","src":"1635:32:5"},"nodeType":"YulIf","src":"1632:119:5"},{"nodeType":"YulBlock","src":"1761:117:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1776:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1790:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1780:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1805:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1840:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1851:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1836:3:5"},"nodeType":"YulFunctionCall","src":"1836:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1860:7:5"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1815:20:5"},"nodeType":"YulFunctionCall","src":"1815:53:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1805:6:5"}]}]},{"nodeType":"YulBlock","src":"1888:118:5","statements":[{"nodeType":"YulVariableDeclaration","src":"1903:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"1917:2:5","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1907:6:5","type":""}]},{"nodeType":"YulAssignment","src":"1933:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1968:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"1979:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1964:3:5"},"nodeType":"YulFunctionCall","src":"1964:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1988:7:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1943:20:5"},"nodeType":"YulFunctionCall","src":"1943:53:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1933:6:5"}]}]},{"nodeType":"YulBlock","src":"2016:287:5","statements":[{"nodeType":"YulVariableDeclaration","src":"2031:46:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2062:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2073:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2058:3:5"},"nodeType":"YulFunctionCall","src":"2058:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2045:12:5"},"nodeType":"YulFunctionCall","src":"2045:32:5"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2035:6:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"2124:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"2126:77:5"},"nodeType":"YulFunctionCall","src":"2126:79:5"},"nodeType":"YulExpressionStatement","src":"2126:79:5"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2096:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"2104:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2093:2:5"},"nodeType":"YulFunctionCall","src":"2093:30:5"},"nodeType":"YulIf","src":"2090:117:5"},{"nodeType":"YulAssignment","src":"2221:72:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2265:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"2276:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2261:3:5"},"nodeType":"YulFunctionCall","src":"2261:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2285:7:5"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"2231:29:5"},"nodeType":"YulFunctionCall","src":"2231:62:5"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2221:6:5"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1576:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1587:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1599:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1607:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1615:6:5","type":""}],"src":"1513:797:5"},{"body":{"nodeType":"YulBlock","src":"2410:413:5","statements":[{"body":{"nodeType":"YulBlock","src":"2456:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2458:77:5"},"nodeType":"YulFunctionCall","src":"2458:79:5"},"nodeType":"YulExpressionStatement","src":"2458:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2431:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"2440:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2427:3:5"},"nodeType":"YulFunctionCall","src":"2427:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"2452:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2423:3:5"},"nodeType":"YulFunctionCall","src":"2423:32:5"},"nodeType":"YulIf","src":"2420:119:5"},{"nodeType":"YulBlock","src":"2549:128:5","statements":[{"nodeType":"YulVariableDeclaration","src":"2564:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"2578:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2568:6:5","type":""}]},{"nodeType":"YulAssignment","src":"2593:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2639:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"2650:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2635:3:5"},"nodeType":"YulFunctionCall","src":"2635:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2659:7:5"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"2603:31:5"},"nodeType":"YulFunctionCall","src":"2603:64:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2593:6:5"}]}]},{"nodeType":"YulBlock","src":"2687:129:5","statements":[{"nodeType":"YulVariableDeclaration","src":"2702:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"2716:2:5","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2706:6:5","type":""}]},{"nodeType":"YulAssignment","src":"2732:74:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2778:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"2789:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2774:3:5"},"nodeType":"YulFunctionCall","src":"2774:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2798:7:5"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"2742:31:5"},"nodeType":"YulFunctionCall","src":"2742:64:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2732:6:5"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2372:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2383:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2395:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2403:6:5","type":""}],"src":"2316:507:5"},{"body":{"nodeType":"YulBlock","src":"2929:519:5","statements":[{"body":{"nodeType":"YulBlock","src":"2975:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2977:77:5"},"nodeType":"YulFunctionCall","src":"2977:79:5"},"nodeType":"YulExpressionStatement","src":"2977:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2950:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"2959:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2946:3:5"},"nodeType":"YulFunctionCall","src":"2946:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"2971:2:5","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2942:3:5"},"nodeType":"YulFunctionCall","src":"2942:32:5"},"nodeType":"YulIf","src":"2939:119:5"},{"nodeType":"YulBlock","src":"3068:117:5","statements":[{"nodeType":"YulVariableDeclaration","src":"3083:15:5","value":{"kind":"number","nodeType":"YulLiteral","src":"3097:1:5","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3087:6:5","type":""}]},{"nodeType":"YulAssignment","src":"3112:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3147:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"3158:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3143:3:5"},"nodeType":"YulFunctionCall","src":"3143:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3167:7:5"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3122:20:5"},"nodeType":"YulFunctionCall","src":"3122:53:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3112:6:5"}]}]},{"nodeType":"YulBlock","src":"3195:118:5","statements":[{"nodeType":"YulVariableDeclaration","src":"3210:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"3224:2:5","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3214:6:5","type":""}]},{"nodeType":"YulAssignment","src":"3240:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3275:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"3286:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3271:3:5"},"nodeType":"YulFunctionCall","src":"3271:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3295:7:5"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3250:20:5"},"nodeType":"YulFunctionCall","src":"3250:53:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3240:6:5"}]}]},{"nodeType":"YulBlock","src":"3323:118:5","statements":[{"nodeType":"YulVariableDeclaration","src":"3338:16:5","value":{"kind":"number","nodeType":"YulLiteral","src":"3352:2:5","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3342:6:5","type":""}]},{"nodeType":"YulAssignment","src":"3368:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3403:9:5"},{"name":"offset","nodeType":"YulIdentifier","src":"3414:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3399:3:5"},"nodeType":"YulFunctionCall","src":"3399:22:5"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3423:7:5"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3378:20:5"},"nodeType":"YulFunctionCall","src":"3378:53:5"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3368:6:5"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2883:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2894:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2906:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2914:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2922:6:5","type":""}],"src":"2829:619:5"},{"body":{"nodeType":"YulBlock","src":"3519:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3536:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3559:5:5"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3541:17:5"},"nodeType":"YulFunctionCall","src":"3541:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3529:6:5"},"nodeType":"YulFunctionCall","src":"3529:37:5"},"nodeType":"YulExpressionStatement","src":"3529:37:5"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3507:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3514:3:5","type":""}],"src":"3454:118:5"},{"body":{"nodeType":"YulBlock","src":"3686:265:5","statements":[{"nodeType":"YulVariableDeclaration","src":"3696:52:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3742:5:5"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3710:31:5"},"nodeType":"YulFunctionCall","src":"3710:38:5"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3700:6:5","type":""}]},{"nodeType":"YulAssignment","src":"3757:95:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3840:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"3845:6:5"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"3764:75:5"},"nodeType":"YulFunctionCall","src":"3764:88:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3757:3:5"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3887:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"3894:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3883:3:5"},"nodeType":"YulFunctionCall","src":"3883:16:5"},{"name":"pos","nodeType":"YulIdentifier","src":"3901:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"3906:6:5"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"3861:21:5"},"nodeType":"YulFunctionCall","src":"3861:52:5"},"nodeType":"YulExpressionStatement","src":"3861:52:5"},{"nodeType":"YulAssignment","src":"3922:23:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3933:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"3938:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3929:3:5"},"nodeType":"YulFunctionCall","src":"3929:16:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3922:3:5"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3667:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3674:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3682:3:5","type":""}],"src":"3578:373:5"},{"body":{"nodeType":"YulBlock","src":"4048:92:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4065:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4127:5:5"}],"functionName":{"name":"convert_t_contract$_LinkTokenInterface_$265_to_t_address","nodeType":"YulIdentifier","src":"4070:56:5"},"nodeType":"YulFunctionCall","src":"4070:63:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4058:6:5"},"nodeType":"YulFunctionCall","src":"4058:76:5"},"nodeType":"YulExpressionStatement","src":"4058:76:5"}]},"name":"abi_encode_t_contract$_LinkTokenInterface_$265_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4036:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4043:3:5","type":""}],"src":"3957:183:5"},{"body":{"nodeType":"YulBlock","src":"4292:220:5","statements":[{"nodeType":"YulAssignment","src":"4302:74:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4368:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"4373:2:5","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4309:58:5"},"nodeType":"YulFunctionCall","src":"4309:67:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4302:3:5"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4474:3:5"}],"functionName":{"name":"store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","nodeType":"YulIdentifier","src":"4385:88:5"},"nodeType":"YulFunctionCall","src":"4385:93:5"},"nodeType":"YulExpressionStatement","src":"4385:93:5"},{"nodeType":"YulAssignment","src":"4487:19:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4498:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"4503:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4494:3:5"},"nodeType":"YulFunctionCall","src":"4494:12:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4487:3:5"}]}]},"name":"abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4280:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4288:3:5","type":""}],"src":"4146:366:5"},{"body":{"nodeType":"YulBlock","src":"4664:220:5","statements":[{"nodeType":"YulAssignment","src":"4674:74:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4740:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"4745:2:5","type":"","value":"19"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4681:58:5"},"nodeType":"YulFunctionCall","src":"4681:67:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4674:3:5"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4846:3:5"}],"functionName":{"name":"store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","nodeType":"YulIdentifier","src":"4757:88:5"},"nodeType":"YulFunctionCall","src":"4757:93:5"},"nodeType":"YulExpressionStatement","src":"4757:93:5"},{"nodeType":"YulAssignment","src":"4859:19:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4870:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"4875:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4866:3:5"},"nodeType":"YulFunctionCall","src":"4866:12:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4859:3:5"}]}]},"name":"abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4652:3:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4660:3:5","type":""}],"src":"4518:366:5"},{"body":{"nodeType":"YulBlock","src":"4955:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4972:3:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4995:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4977:17:5"},"nodeType":"YulFunctionCall","src":"4977:24:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4965:6:5"},"nodeType":"YulFunctionCall","src":"4965:37:5"},"nodeType":"YulExpressionStatement","src":"4965:37:5"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4943:5:5","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4950:3:5","type":""}],"src":"4890:118:5"},{"body":{"nodeType":"YulBlock","src":"5148:137:5","statements":[{"nodeType":"YulAssignment","src":"5159:100:5","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5246:6:5"},{"name":"pos","nodeType":"YulIdentifier","src":"5255:3:5"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"5166:79:5"},"nodeType":"YulFunctionCall","src":"5166:93:5"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5159:3:5"}]},{"nodeType":"YulAssignment","src":"5269:10:5","value":{"name":"pos","nodeType":"YulIdentifier","src":"5276:3:5"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5269:3:5"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5127:3:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5133:6:5","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5144:3:5","type":""}],"src":"5014:271:5"},{"body":{"nodeType":"YulBlock","src":"5417:206:5","statements":[{"nodeType":"YulAssignment","src":"5427:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5439:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5450:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5435:3:5"},"nodeType":"YulFunctionCall","src":"5435:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5427:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5507:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5520:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5531:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5516:3:5"},"nodeType":"YulFunctionCall","src":"5516:17:5"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"5463:43:5"},"nodeType":"YulFunctionCall","src":"5463:71:5"},"nodeType":"YulExpressionStatement","src":"5463:71:5"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5588:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5601:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5612:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5597:3:5"},"nodeType":"YulFunctionCall","src":"5597:18:5"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5544:43:5"},"nodeType":"YulFunctionCall","src":"5544:72:5"},"nodeType":"YulExpressionStatement","src":"5544:72:5"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5381:9:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5393:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5401:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5412:4:5","type":""}],"src":"5291:332:5"},{"body":{"nodeType":"YulBlock","src":"5753:150:5","statements":[{"nodeType":"YulAssignment","src":"5763:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5775:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5786:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5771:3:5"},"nodeType":"YulFunctionCall","src":"5771:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5763:4:5"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5869:6:5"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5882:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"5893:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5878:3:5"},"nodeType":"YulFunctionCall","src":"5878:17:5"}],"functionName":{"name":"abi_encode_t_contract$_LinkTokenInterface_$265_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5799:69:5"},"nodeType":"YulFunctionCall","src":"5799:97:5"},"nodeType":"YulExpressionStatement","src":"5799:97:5"}]},"name":"abi_encode_tuple_t_contract$_LinkTokenInterface_$265__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5725:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5737:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5748:4:5","type":""}],"src":"5629:274:5"},{"body":{"nodeType":"YulBlock","src":"6080:248:5","statements":[{"nodeType":"YulAssignment","src":"6090:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6102:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6113:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6098:3:5"},"nodeType":"YulFunctionCall","src":"6098:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6090:4:5"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6137:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6148:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6133:3:5"},"nodeType":"YulFunctionCall","src":"6133:17:5"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6156:4:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"6162:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6152:3:5"},"nodeType":"YulFunctionCall","src":"6152:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6126:6:5"},"nodeType":"YulFunctionCall","src":"6126:47:5"},"nodeType":"YulExpressionStatement","src":"6126:47:5"},{"nodeType":"YulAssignment","src":"6182:139:5","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6316:4:5"}],"functionName":{"name":"abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6190:124:5"},"nodeType":"YulFunctionCall","src":"6190:131:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6182:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6060:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6075:4:5","type":""}],"src":"5909:419:5"},{"body":{"nodeType":"YulBlock","src":"6505:248:5","statements":[{"nodeType":"YulAssignment","src":"6515:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6527:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6538:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6523:3:5"},"nodeType":"YulFunctionCall","src":"6523:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6515:4:5"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6562:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"6573:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6558:3:5"},"nodeType":"YulFunctionCall","src":"6558:17:5"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6581:4:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"6587:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6577:3:5"},"nodeType":"YulFunctionCall","src":"6577:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6551:6:5"},"nodeType":"YulFunctionCall","src":"6551:47:5"},"nodeType":"YulExpressionStatement","src":"6551:47:5"},{"nodeType":"YulAssignment","src":"6607:139:5","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6741:4:5"}],"functionName":{"name":"abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6615:124:5"},"nodeType":"YulFunctionCall","src":"6615:131:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6607:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6485:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6500:4:5","type":""}],"src":"6334:419:5"},{"body":{"nodeType":"YulBlock","src":"6800:88:5","statements":[{"nodeType":"YulAssignment","src":"6810:30:5","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"6820:18:5"},"nodeType":"YulFunctionCall","src":"6820:20:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6810:6:5"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6869:6:5"},{"name":"size","nodeType":"YulIdentifier","src":"6877:4:5"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"6849:19:5"},"nodeType":"YulFunctionCall","src":"6849:33:5"},"nodeType":"YulExpressionStatement","src":"6849:33:5"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"6784:4:5","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6793:6:5","type":""}],"src":"6759:129:5"},{"body":{"nodeType":"YulBlock","src":"6934:35:5","statements":[{"nodeType":"YulAssignment","src":"6944:19:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6960:2:5","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6954:5:5"},"nodeType":"YulFunctionCall","src":"6954:9:5"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6944:6:5"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6927:6:5","type":""}],"src":"6894:75:5"},{"body":{"nodeType":"YulBlock","src":"7041:241:5","statements":[{"body":{"nodeType":"YulBlock","src":"7146:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7148:16:5"},"nodeType":"YulFunctionCall","src":"7148:18:5"},"nodeType":"YulExpressionStatement","src":"7148:18:5"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7118:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"7126:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7115:2:5"},"nodeType":"YulFunctionCall","src":"7115:30:5"},"nodeType":"YulIf","src":"7112:56:5"},{"nodeType":"YulAssignment","src":"7178:37:5","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7208:6:5"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7186:21:5"},"nodeType":"YulFunctionCall","src":"7186:29:5"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7178:4:5"}]},{"nodeType":"YulAssignment","src":"7252:23:5","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7264:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"7270:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7260:3:5"},"nodeType":"YulFunctionCall","src":"7260:15:5"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7252:4:5"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7025:6:5","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7036:4:5","type":""}],"src":"6975:307:5"},{"body":{"nodeType":"YulBlock","src":"7346:40:5","statements":[{"nodeType":"YulAssignment","src":"7357:22:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7373:5:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7367:5:5"},"nodeType":"YulFunctionCall","src":"7367:12:5"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7357:6:5"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7329:5:5","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"7339:6:5","type":""}],"src":"7288:98:5"},{"body":{"nodeType":"YulBlock","src":"7505:34:5","statements":[{"nodeType":"YulAssignment","src":"7515:18:5","value":{"name":"pos","nodeType":"YulIdentifier","src":"7530:3:5"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"7515:11:5"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7477:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"7482:6:5","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"7493:11:5","type":""}],"src":"7392:147:5"},{"body":{"nodeType":"YulBlock","src":"7641:73:5","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7658:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"7663:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7651:6:5"},"nodeType":"YulFunctionCall","src":"7651:19:5"},"nodeType":"YulExpressionStatement","src":"7651:19:5"},{"nodeType":"YulAssignment","src":"7679:29:5","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7698:3:5"},{"kind":"number","nodeType":"YulLiteral","src":"7703:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7694:3:5"},"nodeType":"YulFunctionCall","src":"7694:14:5"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"7679:11:5"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7613:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"7618:6:5","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"7629:11:5","type":""}],"src":"7545:169:5"},{"body":{"nodeType":"YulBlock","src":"7765:51:5","statements":[{"nodeType":"YulAssignment","src":"7775:35:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7804:5:5"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"7786:17:5"},"nodeType":"YulFunctionCall","src":"7786:24:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7775:7:5"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7747:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7757:7:5","type":""}],"src":"7720:96:5"},{"body":{"nodeType":"YulBlock","src":"7867:32:5","statements":[{"nodeType":"YulAssignment","src":"7877:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"7888:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7877:7:5"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7849:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7859:7:5","type":""}],"src":"7822:77:5"},{"body":{"nodeType":"YulBlock","src":"7950:81:5","statements":[{"nodeType":"YulAssignment","src":"7960:65:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7975:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"7982:42:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7971:3:5"},"nodeType":"YulFunctionCall","src":"7971:54:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7960:7:5"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7932:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7942:7:5","type":""}],"src":"7905:126:5"},{"body":{"nodeType":"YulBlock","src":"8082:32:5","statements":[{"nodeType":"YulAssignment","src":"8092:16:5","value":{"name":"value","nodeType":"YulIdentifier","src":"8103:5:5"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8092:7:5"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8064:5:5","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8074:7:5","type":""}],"src":"8037:77:5"},{"body":{"nodeType":"YulBlock","src":"8206:66:5","statements":[{"nodeType":"YulAssignment","src":"8216:50:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8260:5:5"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"8229:30:5"},"nodeType":"YulFunctionCall","src":"8229:37:5"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"8216:9:5"}]}]},"name":"convert_t_contract$_LinkTokenInterface_$265_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8186:5:5","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"8196:9:5","type":""}],"src":"8120:152:5"},{"body":{"nodeType":"YulBlock","src":"8338:66:5","statements":[{"nodeType":"YulAssignment","src":"8348:50:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8392:5:5"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"8361:30:5"},"nodeType":"YulFunctionCall","src":"8361:37:5"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"8348:9:5"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8318:5:5","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"8328:9:5","type":""}],"src":"8278:126:5"},{"body":{"nodeType":"YulBlock","src":"8470:53:5","statements":[{"nodeType":"YulAssignment","src":"8480:37:5","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8511:5:5"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"8493:17:5"},"nodeType":"YulFunctionCall","src":"8493:24:5"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"8480:9:5"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8450:5:5","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"8460:9:5","type":""}],"src":"8410:113:5"},{"body":{"nodeType":"YulBlock","src":"8580:103:5","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8603:3:5"},{"name":"src","nodeType":"YulIdentifier","src":"8608:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"8613:6:5"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8590:12:5"},"nodeType":"YulFunctionCall","src":"8590:30:5"},"nodeType":"YulExpressionStatement","src":"8590:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8661:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"8666:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8657:3:5"},"nodeType":"YulFunctionCall","src":"8657:16:5"},{"kind":"number","nodeType":"YulLiteral","src":"8675:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8650:6:5"},"nodeType":"YulFunctionCall","src":"8650:27:5"},"nodeType":"YulExpressionStatement","src":"8650:27:5"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8562:3:5","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8567:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"8572:6:5","type":""}],"src":"8529:154:5"},{"body":{"nodeType":"YulBlock","src":"8738:258:5","statements":[{"nodeType":"YulVariableDeclaration","src":"8748:10:5","value":{"kind":"number","nodeType":"YulLiteral","src":"8757:1:5","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8752:1:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"8817:63:5","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8842:3:5"},{"name":"i","nodeType":"YulIdentifier","src":"8847:1:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8838:3:5"},"nodeType":"YulFunctionCall","src":"8838:11:5"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8861:3:5"},{"name":"i","nodeType":"YulIdentifier","src":"8866:1:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8857:3:5"},"nodeType":"YulFunctionCall","src":"8857:11:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8851:5:5"},"nodeType":"YulFunctionCall","src":"8851:18:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8831:6:5"},"nodeType":"YulFunctionCall","src":"8831:39:5"},"nodeType":"YulExpressionStatement","src":"8831:39:5"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8778:1:5"},{"name":"length","nodeType":"YulIdentifier","src":"8781:6:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8775:2:5"},"nodeType":"YulFunctionCall","src":"8775:13:5"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8789:19:5","statements":[{"nodeType":"YulAssignment","src":"8791:15:5","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8800:1:5"},{"kind":"number","nodeType":"YulLiteral","src":"8803:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8796:3:5"},"nodeType":"YulFunctionCall","src":"8796:10:5"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8791:1:5"}]}]},"pre":{"nodeType":"YulBlock","src":"8771:3:5","statements":[]},"src":"8767:113:5"},{"body":{"nodeType":"YulBlock","src":"8914:76:5","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8964:3:5"},{"name":"length","nodeType":"YulIdentifier","src":"8969:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8960:3:5"},"nodeType":"YulFunctionCall","src":"8960:16:5"},{"kind":"number","nodeType":"YulLiteral","src":"8978:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8953:6:5"},"nodeType":"YulFunctionCall","src":"8953:27:5"},"nodeType":"YulExpressionStatement","src":"8953:27:5"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8895:1:5"},{"name":"length","nodeType":"YulIdentifier","src":"8898:6:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8892:2:5"},"nodeType":"YulFunctionCall","src":"8892:13:5"},"nodeType":"YulIf","src":"8889:101:5"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8720:3:5","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8725:3:5","type":""},{"name":"length","nodeType":"YulTypedName","src":"8730:6:5","type":""}],"src":"8689:307:5"},{"body":{"nodeType":"YulBlock","src":"9045:238:5","statements":[{"nodeType":"YulVariableDeclaration","src":"9055:58:5","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9077:6:5"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9107:4:5"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9085:21:5"},"nodeType":"YulFunctionCall","src":"9085:27:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9073:3:5"},"nodeType":"YulFunctionCall","src":"9073:40:5"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"9059:10:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"9224:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9226:16:5"},"nodeType":"YulFunctionCall","src":"9226:18:5"},"nodeType":"YulExpressionStatement","src":"9226:18:5"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9167:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"9179:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9164:2:5"},"nodeType":"YulFunctionCall","src":"9164:34:5"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9203:10:5"},{"name":"memPtr","nodeType":"YulIdentifier","src":"9215:6:5"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9200:2:5"},"nodeType":"YulFunctionCall","src":"9200:22:5"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9161:2:5"},"nodeType":"YulFunctionCall","src":"9161:62:5"},"nodeType":"YulIf","src":"9158:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9262:2:5","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9266:10:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9255:6:5"},"nodeType":"YulFunctionCall","src":"9255:22:5"},"nodeType":"YulExpressionStatement","src":"9255:22:5"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9031:6:5","type":""},{"name":"size","nodeType":"YulTypedName","src":"9039:4:5","type":""}],"src":"9002:281:5"},{"body":{"nodeType":"YulBlock","src":"9317:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9334:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9337:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9327:6:5"},"nodeType":"YulFunctionCall","src":"9327:88:5"},"nodeType":"YulExpressionStatement","src":"9327:88:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9431:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9434:4:5","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9424:6:5"},"nodeType":"YulFunctionCall","src":"9424:15:5"},"nodeType":"YulExpressionStatement","src":"9424:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9455:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9458:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9448:6:5"},"nodeType":"YulFunctionCall","src":"9448:15:5"},"nodeType":"YulExpressionStatement","src":"9448:15:5"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"9289:180:5"},{"body":{"nodeType":"YulBlock","src":"9564:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9581:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9584:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9574:6:5"},"nodeType":"YulFunctionCall","src":"9574:12:5"},"nodeType":"YulExpressionStatement","src":"9574:12:5"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"9475:117:5"},{"body":{"nodeType":"YulBlock","src":"9687:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9704:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9707:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9697:6:5"},"nodeType":"YulFunctionCall","src":"9697:12:5"},"nodeType":"YulExpressionStatement","src":"9697:12:5"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"9598:117:5"},{"body":{"nodeType":"YulBlock","src":"9810:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9827:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9830:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9820:6:5"},"nodeType":"YulFunctionCall","src":"9820:12:5"},"nodeType":"YulExpressionStatement","src":"9820:12:5"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"9721:117:5"},{"body":{"nodeType":"YulBlock","src":"9933:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9950:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9953:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9943:6:5"},"nodeType":"YulFunctionCall","src":"9943:12:5"},"nodeType":"YulExpressionStatement","src":"9943:12:5"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"9844:117:5"},{"body":{"nodeType":"YulBlock","src":"10015:54:5","statements":[{"nodeType":"YulAssignment","src":"10025:38:5","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10043:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"10050:2:5","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10039:3:5"},"nodeType":"YulFunctionCall","src":"10039:14:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10059:2:5","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10055:3:5"},"nodeType":"YulFunctionCall","src":"10055:7:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10035:3:5"},"nodeType":"YulFunctionCall","src":"10035:28:5"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10025:6:5"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9998:5:5","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"10008:6:5","type":""}],"src":"9967:102:5"},{"body":{"nodeType":"YulBlock","src":"10181:71:5","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10203:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"10211:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10199:3:5"},"nodeType":"YulFunctionCall","src":"10199:14:5"},{"hexValue":"6e6f7420656e6f7567682067617320666f7220636f6e73756d6572","kind":"string","nodeType":"YulLiteral","src":"10215:29:5","type":"","value":"not enough gas for consumer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10192:6:5"},"nodeType":"YulFunctionCall","src":"10192:53:5"},"nodeType":"YulExpressionStatement","src":"10192:53:5"}]},"name":"store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10173:6:5","type":""}],"src":"10075:177:5"},{"body":{"nodeType":"YulBlock","src":"10364:63:5","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10386:6:5"},{"kind":"number","nodeType":"YulLiteral","src":"10394:1:5","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10382:3:5"},"nodeType":"YulFunctionCall","src":"10382:14:5"},{"hexValue":"4d75737420757365204c494e4b20746f6b656e","kind":"string","nodeType":"YulLiteral","src":"10398:21:5","type":"","value":"Must use LINK token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10375:6:5"},"nodeType":"YulFunctionCall","src":"10375:45:5"},"nodeType":"YulExpressionStatement","src":"10375:45:5"}]},"name":"store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10356:6:5","type":""}],"src":"10258:169:5"},{"body":{"nodeType":"YulBlock","src":"10476:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"10533:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10542:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10545:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10535:6:5"},"nodeType":"YulFunctionCall","src":"10535:12:5"},"nodeType":"YulExpressionStatement","src":"10535:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10499:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10524:5:5"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"10506:17:5"},"nodeType":"YulFunctionCall","src":"10506:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10496:2:5"},"nodeType":"YulFunctionCall","src":"10496:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10489:6:5"},"nodeType":"YulFunctionCall","src":"10489:43:5"},"nodeType":"YulIf","src":"10486:63:5"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10469:5:5","type":""}],"src":"10433:122:5"},{"body":{"nodeType":"YulBlock","src":"10604:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"10661:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10670:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10673:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10663:6:5"},"nodeType":"YulFunctionCall","src":"10663:12:5"},"nodeType":"YulExpressionStatement","src":"10663:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10627:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10652:5:5"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"10634:17:5"},"nodeType":"YulFunctionCall","src":"10634:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10624:2:5"},"nodeType":"YulFunctionCall","src":"10624:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10617:6:5"},"nodeType":"YulFunctionCall","src":"10617:43:5"},"nodeType":"YulIf","src":"10614:63:5"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10597:5:5","type":""}],"src":"10561:122:5"},{"body":{"nodeType":"YulBlock","src":"10732:79:5","statements":[{"body":{"nodeType":"YulBlock","src":"10789:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10798:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10801:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10791:6:5"},"nodeType":"YulFunctionCall","src":"10791:12:5"},"nodeType":"YulExpressionStatement","src":"10791:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10755:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10780:5:5"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10762:17:5"},"nodeType":"YulFunctionCall","src":"10762:24:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10752:2:5"},"nodeType":"YulFunctionCall","src":"10752:35:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10745:6:5"},"nodeType":"YulFunctionCall","src":"10745:43:5"},"nodeType":"YulIf","src":"10742:63:5"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10725:5:5","type":""}],"src":"10689:122:5"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_uint256t_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_contract$_LinkTokenInterface_$265_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_LinkTokenInterface_$265_to_t_address(value))\n    }\n\n    function abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_contract$_LinkTokenInterface_$265__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_LinkTokenInterface_$265_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_contract$_LinkTokenInterface_$265_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7(memPtr) {\n\n        mstore(add(memPtr, 0), \"not enough gas for consumer\")\n\n    }\n\n    function store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must use LINK token\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":5,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed3614610064578063cf55fe9714610080575b600080fd5b61004e61009c565b60405161005b91906105b2565b60405180910390f35b61007e600480360381019061007991906103cc565b6100c0565b005b61009a6004803603810190610095919061047b565b6101b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610145906105ed565b60405180910390fd5b60008082806020019051810190610165919061043b565b9150915080828673ffffffffffffffffffffffffffffffffffffffff167f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c60405160405180910390a45050505050565b6000806394985ddd60e01b85856040516024016101d3929190610589565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000620324b09050805a101561027d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610274906105cd565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16836040516102a49190610572565b6000604051808303816000865af19150503d80600081146102e1576040519150601f19603f3d011682016040523d82523d6000602084013e6102e6565b606091505b5050905050505050505050565b600061030661030184610632565b61060d565b905082815260208101848484011115610322576103216107ad565b5b61032d848285610706565b509392505050565b6000813590506103448161081f565b92915050565b60008135905061035981610836565b92915050565b60008151905061036e81610836565b92915050565b600082601f830112610389576103886107a8565b5b81356103998482602086016102f3565b91505092915050565b6000813590506103b18161084d565b92915050565b6000815190506103c68161084d565b92915050565b6000806000606084860312156103e5576103e46107b7565b5b60006103f386828701610335565b9350506020610404868287016103a2565b925050604084013567ffffffffffffffff811115610425576104246107b2565b5b61043186828701610374565b9150509250925092565b60008060408385031215610452576104516107b7565b5b60006104608582860161035f565b9250506020610471858286016103b7565b9150509250929050565b600080600060608486031215610494576104936107b7565b5b60006104a28682870161034a565b93505060206104b3868287016103a2565b92505060406104c486828701610335565b9150509250925092565b6104d78161069c565b82525050565b60006104e882610663565b6104f2818561066e565b9350610502818560208601610715565b80840191505092915050565b610517816106d0565b82525050565b600061052a601b83610679565b9150610535826107cd565b602082019050919050565b600061054d601383610679565b9150610558826107f6565b602082019050919050565b61056c816106c6565b82525050565b600061057e82846104dd565b915081905092915050565b600060408201905061059e60008301856104ce565b6105ab6020830184610563565b9392505050565b60006020820190506105c7600083018461050e565b92915050565b600060208201905081810360008301526105e68161051d565b9050919050565b6000602082019050818103600083015261060681610540565b9050919050565b6000610617610628565b90506106238282610748565b919050565b6000604051905090565b600067ffffffffffffffff82111561064d5761064c610779565b5b610656826107bc565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610695826106a6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106db826106e2565b9050919050565b60006106ed826106f4565b9050919050565b60006106ff826106a6565b9050919050565b82818337600083830152505050565b60005b83811015610733578082015181840152602081019050610718565b83811115610742576000848401525b50505050565b610751826107bc565b810181811067ffffffffffffffff821117156107705761076f610779565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6e6f7420656e6f7567682067617320666f7220636f6e73756d65720000000000600082015250565b7f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000600082015250565b6108288161068a565b811461083357600080fd5b50565b61083f8161069c565b811461084a57600080fd5b50565b610856816106c6565b811461086157600080fd5b5056fea2646970667358221220fa51051756dda7c536fd2c6c12ebee0f7566e576e79c2110e719e902875d72b764736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B6B6D23 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xCF55FE97 EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x79 SWAP2 SWAP1 PUSH2 0x3CC JUMP JUMPDEST PUSH2 0xC0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x95 SWAP2 SWAP1 PUSH2 0x47B JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x43B JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7A9A0A6960D95B32CDED93C30E63E7C2EB9E877230813C172110EA54DC1C915C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x94985DDD PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D3 SWAP3 SWAP2 SWAP1 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH3 0x324B0 SWAP1 POP DUP1 GAS LT ISZERO PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x274 SWAP1 PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x572 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306 PUSH2 0x301 DUP5 PUSH2 0x632 JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x322 JUMPI PUSH2 0x321 PUSH2 0x7AD JUMP JUMPDEST JUMPDEST PUSH2 0x32D DUP5 DUP3 DUP6 PUSH2 0x706 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x344 DUP2 PUSH2 0x81F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x359 DUP2 PUSH2 0x836 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x36E DUP2 PUSH2 0x836 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x389 JUMPI PUSH2 0x388 PUSH2 0x7A8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x399 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2F3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3B1 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3C6 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E5 JUMPI PUSH2 0x3E4 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP7 DUP3 DUP8 ADD PUSH2 0x335 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x404 DUP7 DUP3 DUP8 ADD PUSH2 0x3A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x425 JUMPI PUSH2 0x424 PUSH2 0x7B2 JUMP JUMPDEST JUMPDEST PUSH2 0x431 DUP7 DUP3 DUP8 ADD PUSH2 0x374 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x452 JUMPI PUSH2 0x451 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x460 DUP6 DUP3 DUP7 ADD PUSH2 0x35F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x471 DUP6 DUP3 DUP7 ADD PUSH2 0x3B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x494 JUMPI PUSH2 0x493 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4A2 DUP7 DUP3 DUP8 ADD PUSH2 0x34A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x4B3 DUP7 DUP3 DUP8 ADD PUSH2 0x3A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x4C4 DUP7 DUP3 DUP8 ADD PUSH2 0x335 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x4D7 DUP2 PUSH2 0x69C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E8 DUP3 PUSH2 0x663 JUMP JUMPDEST PUSH2 0x4F2 DUP2 DUP6 PUSH2 0x66E JUMP JUMPDEST SWAP4 POP PUSH2 0x502 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x715 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x6D0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52A PUSH1 0x1B DUP4 PUSH2 0x679 JUMP JUMPDEST SWAP2 POP PUSH2 0x535 DUP3 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54D PUSH1 0x13 DUP4 PUSH2 0x679 JUMP JUMPDEST SWAP2 POP PUSH2 0x558 DUP3 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x56C DUP2 PUSH2 0x6C6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57E DUP3 DUP5 PUSH2 0x4DD JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x59E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x4CE JUMP JUMPDEST PUSH2 0x5AB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x563 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5C7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x50E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5E6 DUP2 PUSH2 0x51D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x606 DUP2 PUSH2 0x540 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x617 PUSH2 0x628 JUMP JUMPDEST SWAP1 POP PUSH2 0x623 DUP3 DUP3 PUSH2 0x748 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x64D JUMPI PUSH2 0x64C PUSH2 0x779 JUMP JUMPDEST JUMPDEST PUSH2 0x656 DUP3 PUSH2 0x7BC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x695 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DB DUP3 PUSH2 0x6E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6ED DUP3 PUSH2 0x6F4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6FF DUP3 PUSH2 0x6A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x733 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x718 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x742 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x751 DUP3 PUSH2 0x7BC JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x770 JUMPI PUSH2 0x76F PUSH2 0x779 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4D75737420757365204C494E4B20746F6B656E00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x828 DUP2 PUSH2 0x68A JUMP JUMPDEST DUP2 EQ PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x83F DUP2 PUSH2 0x69C JUMP JUMPDEST DUP2 EQ PUSH2 0x84A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x856 DUP2 PUSH2 0x6C6 JUMP JUMPDEST DUP2 EQ PUSH2 0x861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL MLOAD SDIV OR JUMP 0xDD 0xA7 0xC5 CALLDATASIZE REVERT 0x2C PUSH13 0x12EBEE0F7566E576E79C2110E7 NOT 0xE9 MUL DUP8 0x5D PUSH19 0xB764736F6C6343000807003300000000000000 ","sourceMap":"138:993:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;170:30;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;397:239;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;640:388;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;170:30;;;;;;;;;;;;:::o;397:239::-;1088:4;;;;;;;;;;1066:27;;:10;:27;;;1058:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;510:15:::1;527:12:::0;554:5:::1;543:37;;;;;;;;;;;;:::i;:::-;509:71;;;;626:4;617:7;609:6;591:40;;;;;;;;;;;;503:133;;397:239:::0;;;:::o;640:388::-;766:17;789;832:31;;;865:9;876:10;809:78;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;789:98;;893:9;905:6;893:18;;938:1;925:9;:14;;917:54;;;;;;;;;;;;:::i;:::-;;;;;;;;;978:12;996:16;:21;;1018:4;996:27;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;977:46;;;760:268;;;;640:388;;;:::o;7:410:5:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:112;;;280:79;;:::i;:::-;249:112;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;7:410;;;;;:::o;423:139::-;469:5;507:6;494:20;485:29;;523:33;550:5;523:33;:::i;:::-;423:139;;;;:::o;568:::-;614:5;652:6;639:20;630:29;;668:33;695:5;668:33;:::i;:::-;568:139;;;;:::o;713:143::-;770:5;801:6;795:13;786:22;;817:33;844:5;817:33;:::i;:::-;713:143;;;;:::o;875:338::-;930:5;979:3;972:4;964:6;960:17;956:27;946:122;;987:79;;:::i;:::-;946:122;1104:6;1091:20;1129:78;1203:3;1195:6;1188:4;1180:6;1176:17;1129:78;:::i;:::-;1120:87;;936:277;875:338;;;;:::o;1219:139::-;1265:5;1303:6;1290:20;1281:29;;1319:33;1346:5;1319:33;:::i;:::-;1219:139;;;;:::o;1364:143::-;1421:5;1452:6;1446:13;1437:22;;1468:33;1495:5;1468:33;:::i;:::-;1364:143;;;;:::o;1513:797::-;1599:6;1607;1615;1664:2;1652:9;1643:7;1639:23;1635:32;1632:119;;;1670:79;;:::i;:::-;1632:119;1790:1;1815:53;1860:7;1851:6;1840:9;1836:22;1815:53;:::i;:::-;1805:63;;1761:117;1917:2;1943:53;1988:7;1979:6;1968:9;1964:22;1943:53;:::i;:::-;1933:63;;1888:118;2073:2;2062:9;2058:18;2045:32;2104:18;2096:6;2093:30;2090:117;;;2126:79;;:::i;:::-;2090:117;2231:62;2285:7;2276:6;2265:9;2261:22;2231:62;:::i;:::-;2221:72;;2016:287;1513:797;;;;;:::o;2316:507::-;2395:6;2403;2452:2;2440:9;2431:7;2427:23;2423:32;2420:119;;;2458:79;;:::i;:::-;2420:119;2578:1;2603:64;2659:7;2650:6;2639:9;2635:22;2603:64;:::i;:::-;2593:74;;2549:128;2716:2;2742:64;2798:7;2789:6;2778:9;2774:22;2742:64;:::i;:::-;2732:74;;2687:129;2316:507;;;;;:::o;2829:619::-;2906:6;2914;2922;2971:2;2959:9;2950:7;2946:23;2942:32;2939:119;;;2977:79;;:::i;:::-;2939:119;3097:1;3122:53;3167:7;3158:6;3147:9;3143:22;3122:53;:::i;:::-;3112:63;;3068:117;3224:2;3250:53;3295:7;3286:6;3275:9;3271:22;3250:53;:::i;:::-;3240:63;;3195:118;3352:2;3378:53;3423:7;3414:6;3403:9;3399:22;3378:53;:::i;:::-;3368:63;;3323:118;2829:619;;;;;:::o;3454:118::-;3541:24;3559:5;3541:24;:::i;:::-;3536:3;3529:37;3454:118;;:::o;3578:373::-;3682:3;3710:38;3742:5;3710:38;:::i;:::-;3764:88;3845:6;3840:3;3764:88;:::i;:::-;3757:95;;3861:52;3906:6;3901:3;3894:4;3887:5;3883:16;3861:52;:::i;:::-;3938:6;3933:3;3929:16;3922:23;;3686:265;3578:373;;;;:::o;3957:183::-;4070:63;4127:5;4070:63;:::i;:::-;4065:3;4058:76;3957:183;;:::o;4146:366::-;4288:3;4309:67;4373:2;4368:3;4309:67;:::i;:::-;4302:74;;4385:93;4474:3;4385:93;:::i;:::-;4503:2;4498:3;4494:12;4487:19;;4146:366;;;:::o;4518:::-;4660:3;4681:67;4745:2;4740:3;4681:67;:::i;:::-;4674:74;;4757:93;4846:3;4757:93;:::i;:::-;4875:2;4870:3;4866:12;4859:19;;4518:366;;;:::o;4890:118::-;4977:24;4995:5;4977:24;:::i;:::-;4972:3;4965:37;4890:118;;:::o;5014:271::-;5144:3;5166:93;5255:3;5246:6;5166:93;:::i;:::-;5159:100;;5276:3;5269:10;;5014:271;;;;:::o;5291:332::-;5412:4;5450:2;5439:9;5435:18;5427:26;;5463:71;5531:1;5520:9;5516:17;5507:6;5463:71;:::i;:::-;5544:72;5612:2;5601:9;5597:18;5588:6;5544:72;:::i;:::-;5291:332;;;;;:::o;5629:274::-;5748:4;5786:2;5775:9;5771:18;5763:26;;5799:97;5893:1;5882:9;5878:17;5869:6;5799:97;:::i;:::-;5629:274;;;;:::o;5909:419::-;6075:4;6113:2;6102:9;6098:18;6090:26;;6162:9;6156:4;6152:20;6148:1;6137:9;6133:17;6126:47;6190:131;6316:4;6190:131;:::i;:::-;6182:139;;5909:419;;;:::o;6334:::-;6500:4;6538:2;6527:9;6523:18;6515:26;;6587:9;6581:4;6577:20;6573:1;6562:9;6558:17;6551:47;6615:131;6741:4;6615:131;:::i;:::-;6607:139;;6334:419;;;:::o;6759:129::-;6793:6;6820:20;;:::i;:::-;6810:30;;6849:33;6877:4;6869:6;6849:33;:::i;:::-;6759:129;;;:::o;6894:75::-;6927:6;6960:2;6954:9;6944:19;;6894:75;:::o;6975:307::-;7036:4;7126:18;7118:6;7115:30;7112:56;;;7148:18;;:::i;:::-;7112:56;7186:29;7208:6;7186:29;:::i;:::-;7178:37;;7270:4;7264;7260:15;7252:23;;6975:307;;;:::o;7288:98::-;7339:6;7373:5;7367:12;7357:22;;7288:98;;;:::o;7392:147::-;7493:11;7530:3;7515:18;;7392:147;;;;:::o;7545:169::-;7629:11;7663:6;7658:3;7651:19;7703:4;7698:3;7694:14;7679:29;;7545:169;;;;:::o;7720:96::-;7757:7;7786:24;7804:5;7786:24;:::i;:::-;7775:35;;7720:96;;;:::o;7822:77::-;7859:7;7888:5;7877:16;;7822:77;;;:::o;7905:126::-;7942:7;7982:42;7975:5;7971:54;7960:65;;7905:126;;;:::o;8037:77::-;8074:7;8103:5;8092:16;;8037:77;;;:::o;8120:152::-;8196:9;8229:37;8260:5;8229:37;:::i;:::-;8216:50;;8120:152;;;:::o;8278:126::-;8328:9;8361:37;8392:5;8361:37;:::i;:::-;8348:50;;8278:126;;;:::o;8410:113::-;8460:9;8493:24;8511:5;8493:24;:::i;:::-;8480:37;;8410:113;;;:::o;8529:154::-;8613:6;8608:3;8603;8590:30;8675:1;8666:6;8661:3;8657:16;8650:27;8529:154;;;:::o;8689:307::-;8757:1;8767:113;8781:6;8778:1;8775:13;8767:113;;;8866:1;8861:3;8857:11;8851:18;8847:1;8842:3;8838:11;8831:39;8803:2;8800:1;8796:10;8791:15;;8767:113;;;8898:6;8895:1;8892:13;8889:101;;;8978:1;8969:6;8964:3;8960:16;8953:27;8889:101;8738:258;8689:307;;;:::o;9002:281::-;9085:27;9107:4;9085:27;:::i;:::-;9077:6;9073:40;9215:6;9203:10;9200:22;9179:18;9167:10;9164:34;9161:62;9158:88;;;9226:18;;:::i;:::-;9158:88;9266:10;9262:2;9255:22;9045:238;9002:281;;:::o;9289:180::-;9337:77;9334:1;9327:88;9434:4;9431:1;9424:15;9458:4;9455:1;9448:15;9475:117;9584:1;9581;9574:12;9598:117;9707:1;9704;9697:12;9721:117;9830:1;9827;9820:12;9844:117;9953:1;9950;9943:12;9967:102;10008:6;10059:2;10055:7;10050:2;10043:5;10039:14;10035:28;10025:38;;9967:102;;;:::o;10075:177::-;10215:29;10211:1;10203:6;10199:14;10192:53;10075:177;:::o;10258:169::-;10398:21;10394:1;10386:6;10382:14;10375:45;10258:169;:::o;10433:122::-;10506:24;10524:5;10506:24;:::i;:::-;10499:5;10496:35;10486:63;;10545:1;10542;10535:12;10486:63;10433:122;:::o;10561:::-;10634:24;10652:5;10634:24;:::i;:::-;10627:5;10624:35;10614:63;;10673:1;10670;10663:12;10614:63;10561:122;:::o;10689:::-;10762:24;10780:5;10762:24;:::i;:::-;10755:5;10752:35;10742:63;;10801:1;10798;10791:12;10742:63;10689:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"440400","executionCost":"infinite","totalCost":"infinite"},"external":{"LINK()":"2575","callBackWithRandomness(bytes32,uint256,address)":"infinite","onTokenTransfer(address,uint256,bytes)":"infinite"}},"methodIdentifiers":{"LINK()":"1b6b6d23","callBackWithRandomness(bytes32,uint256,address)":"cf55fe97","onTokenTransfer(address,uint256,bytes)":"a4c0ed36"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"linkAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumerContract\",\"type\":\"address\"}],\"name\":\"callBackWithRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol\":\"VRFCoordinatorMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../VRFConsumerBase.sol\\\";\\n\\ncontract VRFCoordinatorMock {\\n  LinkTokenInterface public LINK;\\n\\n  event RandomnessRequest(address indexed sender, bytes32 indexed keyHash, uint256 indexed seed);\\n\\n  constructor(address linkAddress) public {\\n    LINK = LinkTokenInterface(linkAddress);\\n  }\\n\\n  function onTokenTransfer(\\n    address sender,\\n    uint256 fee,\\n    bytes memory _data\\n  ) public onlyLINK {\\n    (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\\n    emit RandomnessRequest(sender, keyHash, seed);\\n  }\\n\\n  function callBackWithRandomness(\\n    bytes32 requestId,\\n    uint256 randomness,\\n    address consumerContract\\n  ) public {\\n    VRFConsumerBase v;\\n    bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\\n    uint256 b = 206000;\\n    require(gasleft() >= b, \\\"not enough gas for consumer\\\");\\n    (bool success, ) = consumerContract.call(resp);\\n  }\\n\\n  modifier onlyLINK() {\\n    require(msg.sender == address(LINK), \\\"Must use LINK token\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2b543e45ccc04fc3e4735c151e726d1d279fae0346cc572d4e8fb88817c4f619\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":272,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol:VRFCoordinatorMock","label":"LINK","offset":0,"slot":"0","type":"t_contract(LinkTokenInterface)265"}],"types":{"t_contract(LinkTokenInterface)265":{"encoding":"inplace","label":"contract LinkTokenInterface","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}